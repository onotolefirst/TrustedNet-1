//
//  WizardEncryptViewController.m
//  CryptoARM
//
//  Created by Денис Бурдин on 06.10.11.
//  Copyright 2011 __MyCompanyName__. All rights reserved.
//

#import "WizardEncryptViewController.h"

@implementation WizardEncryptViewController
@synthesize imageDoc, documentName, creationDate, documentSize, urlToRecievedFile, private_key, btnSelectSettings, btnAddRecipients,
    navDocRecipList, imageProfile, tblRecipients, docInteractionController, operationType, settingsMenuPopover, isShowingLandscapeView;

- (id)initWithNibName:(NSString *)nibNameOrNil withFileURL:(NSURL *)url bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];

    if (self) {
        urlToRecievedFile = url;

        // this is enciphered message
        operationType = ENCIPHER_OPERATION;
        
        // decode url path to recieved file
        NSString *URLString = [urlToRecievedFile absoluteString];
        
        // %20 - space, need to be replaced
        URLString = [URLString stringByReplacingOccurrencesOfString:@"%20" withString:@" "];

        // incoming documents are always put in <Application_Home>/Documents/Inbox folder
        inputFilePath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];
        inputFilePath = [inputFilePath stringByAppendingPathComponent:@"Inbox"];
        inputFilePath = [inputFilePath stringByAppendingPathComponent:[URLString lastPathComponent]];
        [inputFilePath retain];
                        
        // check if recieved data is enciphered, signed or plain text
        BIO *bioInputFile = BIO_new_file([inputFilePath cStringUsingEncoding:NSASCIIStringEncoding], "r");
        PKCS7 *inputMessage;
        STACK_OF(X509) *skRecipients = sk_X509_new_null(); // TODO: make sorting with sk_X509_new(cmp); cmp - sorting function
        
        //  i2d_X509_bio(<#BIO *bp#>, <#X509 *x509#>)
        // if bioInputFile is in base64
        inputMessage = PEM_read_bio_PKCS7(bioInputFile, NULL, NULL, NULL);
        
        if (!inputMessage)
        {
            // if bioInputFile is in DER
            inputMessage = d2i_PKCS7_bio(bioInputFile, NULL);
        }
                
        if (nil != inputMessage)
        {
            // this is encrypted or signed data
            if (PKCS7_type_is_enveloped(inputMessage))
            {
                STACK_OF(PKCS7_RECIP_INFO) *sk = inputMessage->d.enveloped->recipientinfo;
                int num = 0;
                
                if (sk && ((num = sk_PKCS7_RECIP_INFO_num(sk)) > 0))
                {
                    for(int i = 0; i < num; i++)
                    {
                        sk_X509_push(skRecipients, sk_PKCS7_RECIP_INFO_value(sk, i)->cert);
                    }
                }
            }
            else if (PKCS7_type_is_signed(inputMessage))
            {
                // TODO: implement in version 2
            }
        }
        
        resultTempFilePath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];
        resultTempFilePath = [resultTempFilePath stringByDeletingLastPathComponent];
        resultTempFilePath = [resultTempFilePath stringByAppendingPathComponent:@"tmp"];
        resultTempFilePath = [resultTempFilePath stringByAppendingPathComponent:[URLString lastPathComponent]];
        
        if (sk_X509_num(skRecipients))
        {
            // this is enciphered message
            operationType = DECIPHER_OPERATION;
            
            // remove last path extention
            resultTempFilePath = [resultTempFilePath stringByDeletingPathExtension];
            NSArray *arrExt = [[resultTempFilePath lastPathComponent] componentsSeparatedByString:@"."];
            
            NSString *strLastExtention = [arrExt objectAtIndex:[arrExt count] - 1];
            if ([strLastExtention rangeOfString:@"-"].location != NSNotFound)
            {
                resultTempFilePath = [resultTempFilePath stringByDeletingPathExtension];
                resultTempFilePath = [resultTempFilePath stringByAppendingString:@"."];
                resultTempFilePath = [resultTempFilePath stringByAppendingString:[[strLastExtention componentsSeparatedByString:@"-"] objectAtIndex:0]];
            }
        }
        else
        {
            // this message is for enciphering
            resultTempFilePath = [resultTempFilePath stringByAppendingString:@".enc"];
        }

        [resultTempFilePath retain];

        //   PKCS7 *xxx;
        //PKCS7 *xxx = SMIME_read_PKCS7(bioInputFile, &tmp);
        // d2i_PKCS7_bio(tmp, xxx);
        /*
         STACK_OF(MIME_HEADER) *headers = NULL;        
         if (!(headers = mime_parse_hdr(bioInputFile)))
         {
         int dfbf= 0;
         }
         */
        BIO_free(bioInputFile);
        sk_X509_free(skRecipients);
        
        [self constructSettingsMenu];
        
    
    //////////////////////////
    //  TODO: DELETE IT!!!!!
    static const char* szCerts =
    "-----BEGIN CERTIFICATE-----\n"
    "MIIEUTCCA7qgAwIBAgIIBNz+MS47pgAwDQYJKoZIhvcNAQEFBQAwgckxGDAWBggq\n"
    "hQMDgQMBARMKMTIzNDU2Nzg5MDEYMBYGCSqGSIb3DQEJARYJbWQ1QGJrLnJ1MQsw\n"
    "CQYDVQQGEwJSVTEZMBcGA1UECB4QBBwEMARABDgEOQAgBC0EOzEdMBsGA1UEBx4U\n"
    "BBkEPgRIBDoEMARAAC0EHgQ7BDAxOzA5BgNVBAoeMgQeBB4EHgAgACIEJgQ4BEQE\n"
    "QAQ+BDIESwQ1ACAEIgQ1BEUEPQQ+BDsEPgQzBDgEOAAiMQ8wDQYDVQQDHgYEIAQh\n"
    "BBAwHhcNMTEwOTAxMDYyODQ5WhcNMTIwOTAxMDYyODQ5WjCByTEYMBYGCCqFAwOB\n"
    "AwEBEwoxMjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNV\n"
    "BAYTAlJVMRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+\n"
    "BEgEOgQwBEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4E\n"
    "MgRLBDUAIAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEDCB\n"
    "nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3pPaMYmxtliOKKYEywW1PShh7uKL\n"
    "snbIheoFBkXXpVavlYOk6vHBhBdi5S87hz2TJS9MW2GQ28xrd3r/eCjq8Bpd/4af\n"
    "D2NgIeupuvlAHZSNXu1kxpG0fjorFGDTHFhdmYuRA5gs1pUXbaosXC9qtVWXXKXb\n"
    "++1Ft4dvIicRqTMCAwEAAaOCAT4wggE6MB0GA1UdDgQWBBTAN2kYPAnPc2Py7WLG\n"
    "vlOLrvEzQjALBgNVHQ8EBAMCA9gwDwYDVR0TBAgwBgEB/wIBATCB+gYDVR0BBIHy\n"
    "MIHvgBTAN2kYPAnPc2Py7WLGvlOLrvEzQqGBzDCByTEYMBYGCCqFAwOBAwEBEwox\n"
    "MjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNVBAYTAlJV\n"
    "MRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+BEgEOgQw\n"
    "BEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4EMgRLBDUA\n"
    "IAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEIIIBNz+MS47\n"
    "pgAwDQYJKoZIhvcNAQEFBQADgYEAnf8i4SvPxxBwM1FC8WMu10r2wjwTzOSyQ8fr\n"
    "RlI9hvEEgeXAz0altPyjdYZ+rr9a8YAwDvDuj1YWe95B1bB7VtYpkBRyzjhAh7Ic\n"
    "phQbkDWgXTU4DYAXGT5Bf+C3NS+WSww81DbrhOeq7I4ALL+TLKcYucK/yGMA08Vn\n"
    "W1pCWV0=\n"
    "-----END CERTIFICATE-----\n"
        "-----BEGIN CERTIFICATE-----\n"
        "MIIEPzCCA6igAwIBAgIIETi6zU8SvQAwDQYJKoZIhvcNAQEFBQAwgcMxETAPBggq\n"
        "hQMDgQMBARMDNzc3MRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNVBAYT\n"
        "AlJVMRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+BEgE\n"
        "OgQwBEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4EMgRL\n"
        "BDUAIAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxEDAOBgNVBAMTB2VuY3J5cHQwHhcN\n"
        "MTExMDE4MTAyMzA3WhcNMTIxMDE4MTAyMzA3WjCBwzERMA8GCCqFAwOBAwEBEwM3\n"
        "NzcxGDAWBgkqhkiG9w0BCQEWCW1kNUBiay5ydTELMAkGA1UEBhMCUlUxGTAXBgNV\n"
        "BAgeEAQcBDAEQAQ4BDkAIAQtBDsxHTAbBgNVBAceFAQZBD4ESAQ6BDAEQAAtBB4E\n"
        "OwQwMTswOQYDVQQKHjIEHgQeBB4AIAAiBCYEOAREBEAEPgQyBEsENQAgBCIENQRF\n"
        "BD0EPgQ7BD4EMwQ4BDgAIjEQMA4GA1UEAxMHZW5jcnlwdDCBnzANBgkqhkiG9w0B\n"
        "AQEFAAOBjQAwgYkCgYEArTozJckO27mAF4NRg9c01W9zGWnL0S46rcWmJ8ggPjiB\n"
        "ZvAHLxvmj4sSVB+3NoEujhnJNmOW2Ik7Zd8MKVxZU1IYuW2d1HDyLV2qcFDy4POq\n"
        "v9JTvmeKPjaVHwge94bwzNrLx4hrJ+o6mAcPrsNjflGRLkYzs9s4smCGCTIXPfsC\n"
        "AwEAAaOCATgwggE0MB0GA1UdDgQWBBS8vrwWsosznF6p7+WfQ6yn9/xUezALBgNV\n"
        "HQ8EBAMCAf4wDwYDVR0TBAgwBgEB/wIBATCB9AYDVR0BBIHsMIHpgBS8vrwWsosz\n"
        "nF6p7+WfQ6yn9/xUe6GBxjCBwzERMA8GCCqFAwOBAwEBEwM3NzcxGDAWBgkqhkiG\n"
        "9w0BCQEWCW1kNUBiay5ydTELMAkGA1UEBhMCUlUxGTAXBgNVBAgeEAQcBDAEQAQ4\n"
        "BDkAIAQtBDsxHTAbBgNVBAceFAQZBD4ESAQ6BDAEQAAtBB4EOwQwMTswOQYDVQQK\n"
        "HjIEHgQeBB4AIAAiBCYEOAREBEAEPgQyBEsENQAgBCIENQRFBD0EPgQ7BD4EMwQ4\n"
        "BDgAIjEQMA4GA1UEAxMHZW5jcnlwdIIIETi6zU8SvQAwDQYJKoZIhvcNAQEFBQAD\n"
        "gYEAepZJExHzpJSM4qnTXAuWWhfjqMJWJqtK/QDCeOj3k75aLlG+iV8bgj2F65rV\n"
        "l6n8hxJ6VK/lTBNuZDOgJczAqtgAIH6CGTvE/+M+DW5CDP69kgRR/ZHKaCaxGWG1\n"
        "nrTpii1F+yoaNzD17gQGzi6x/JUSMlP2HiwU1afiAPmotfw=\n"
        "-----END CERTIFICATE-----\n"
    "-----BEGIN CERTIFICATE-----\n"
    "MIIEUTCCA7qgAwIBAgIIBNz+MS47pgAwDQYJKoZIhvcNAQEFBQAwgckxGDAWBggq\n"
    "hQMDgQMBARMKMTIzNDU2Nzg5MDEYMBYGCSqGSIb3DQEJARYJbWQ1QGJrLnJ1MQsw\n"
    "CQYDVQQGEwJSVTEZMBcGA1UECB4QBBwEMARABDgEOQAgBC0EOzEdMBsGA1UEBx4U\n"
    "BBkEPgRIBDoEMARAAC0EHgQ7BDAxOzA5BgNVBAoeMgQeBB4EHgAgACIEJgQ4BEQE\n"
    "QAQ+BDIESwQ1ACAEIgQ1BEUEPQQ+BDsEPgQzBDgEOAAiMQ8wDQYDVQQDHgYEIAQh\n"
    "BBAwHhcNMTEwOTAxMDYyODQ5WhcNMTIwOTAxMDYyODQ5WjCByTEYMBYGCCqFAwOB\n"
    "AwEBEwoxMjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNV\n"
    "BAYTAlJVMRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+\n"
    "BEgEOgQwBEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4E\n"
    "MgRLBDUAIAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEDCB\n"
    "nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3pPaMYmxtliOKKYEywW1PShh7uKL\n"
    "snbIheoFBkXXpVavlYOk6vHBhBdi5S87hz2TJS9MW2GQ28xrd3r/eCjq8Bpd/4af\n"
    "D2NgIeupuvlAHZSNXu1kxpG0fjorFGDTHFhdmYuRA5gs1pUXbaosXC9qtVWXXKXb\n"
    "++1Ft4dvIicRqTMCAwEAAaOCAT4wggE6MB0GA1UdDgQWBBTAN2kYPAnPc2Py7WLG\n"
    "vlOLrvEzQjALBgNVHQ8EBAMCA9gwDwYDVR0TBAgwBgEB/wIBATCB+gYDVR0BBIHy\n"
    "MIHvgBTAN2kYPAnPc2Py7WLGvlOLrvEzQqGBzDCByTEYMBYGCCqFAwOBAwEBEwox\n"
    "MjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNVBAYTAlJV\n"
    "MRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+BEgEOgQw\n"
    "BEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4EMgRLBDUA\n"
    "IAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEIIIBNz+MS47\n"
    "pgAwDQYJKoZIhvcNAQEFBQADgYEAnf8i4SvPxxBwM1FC8WMu10r2wjwTzOSyQ8fr\n"
    "RlI9hvEEgeXAz0altPyjdYZ+rr9a8YAwDvDuj1YWe95B1bB7VtYpkBRyzjhAh7Ic\n"
    "phQbkDWgXTU4DYAXGT5Bf+C3NS+WSww81DbrhOeq7I4ALL+TLKcYucK/yGMA08Vn\n"
    "W1pCWV0=\n"
    "-----END CERTIFICATE-----\n"
    "-----BEGIN CERTIFICATE-----\n"
    "MIIEUTCCA7qgAwIBAgIIBNz+MS47pgAwDQYJKoZIhvcNAQEFBQAwgckxGDAWBggq\n"
    "hQMDgQMBARMKMTIzNDU2Nzg5MDEYMBYGCSqGSIb3DQEJARYJbWQ1QGJrLnJ1MQsw\n"
    "CQYDVQQGEwJSVTEZMBcGA1UECB4QBBwEMARABDgEOQAgBC0EOzEdMBsGA1UEBx4U\n"
    "BBkEPgRIBDoEMARAAC0EHgQ7BDAxOzA5BgNVBAoeMgQeBB4EHgAgACIEJgQ4BEQE\n"
    "QAQ+BDIESwQ1ACAEIgQ1BEUEPQQ+BDsEPgQzBDgEOAAiMQ8wDQYDVQQDHgYEIAQh\n"
    "BBAwHhcNMTEwOTAxMDYyODQ5WhcNMTIwOTAxMDYyODQ5WjCByTEYMBYGCCqFAwOB\n"
    "AwEBEwoxMjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNV\n"
    "BAYTAlJVMRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+\n"
    "BEgEOgQwBEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4E\n"
    "MgRLBDUAIAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEDCB\n"
    "nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3pPaMYmxtliOKKYEywW1PShh7uKL\n"
    "snbIheoFBkXXpVavlYOk6vHBhBdi5S87hz2TJS9MW2GQ28xrd3r/eCjq8Bpd/4af\n"
    "D2NgIeupuvlAHZSNXu1kxpG0fjorFGDTHFhdmYuRA5gs1pUXbaosXC9qtVWXXKXb\n"
    "++1Ft4dvIicRqTMCAwEAAaOCAT4wggE6MB0GA1UdDgQWBBTAN2kYPAnPc2Py7WLG\n"
    "vlOLrvEzQjALBgNVHQ8EBAMCA9gwDwYDVR0TBAgwBgEB/wIBATCB+gYDVR0BBIHy\n"
    "MIHvgBTAN2kYPAnPc2Py7WLGvlOLrvEzQqGBzDCByTEYMBYGCCqFAwOBAwEBEwox\n"
    "MjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNVBAYTAlJV\n"
    "MRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+BEgEOgQw\n"
    "BEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4EMgRLBDUA\n"
    "IAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEIIIBNz+MS47\n"
    "pgAwDQYJKoZIhvcNAQEFBQADgYEAnf8i4SvPxxBwM1FC8WMu10r2wjwTzOSyQ8fr\n"
    "RlI9hvEEgeXAz0altPyjdYZ+rr9a8YAwDvDuj1YWe95B1bB7VtYpkBRyzjhAh7Ic\n"
    "phQbkDWgXTU4DYAXGT5Bf+C3NS+WSww81DbrhOeq7I4ALL+TLKcYucK/yGMA08Vn\n"
    "W1pCWV0=\n"
    "-----END CERTIFICATE-----\n"
    "-----BEGIN CERTIFICATE-----\n"
    "MIIEUTCCA7qgAwIBAgIIBNz+MS47pgAwDQYJKoZIhvcNAQEFBQAwgckxGDAWBggq\n"
    "hQMDgQMBARMKMTIzNDU2Nzg5MDEYMBYGCSqGSIb3DQEJARYJbWQ1QGJrLnJ1MQsw\n"
    "CQYDVQQGEwJSVTEZMBcGA1UECB4QBBwEMARABDgEOQAgBC0EOzEdMBsGA1UEBx4U\n"
    "BBkEPgRIBDoEMARAAC0EHgQ7BDAxOzA5BgNVBAoeMgQeBB4EHgAgACIEJgQ4BEQE\n"
    "QAQ+BDIESwQ1ACAEIgQ1BEUEPQQ+BDsEPgQzBDgEOAAiMQ8wDQYDVQQDHgYEIAQh\n"
    "BBAwHhcNMTEwOTAxMDYyODQ5WhcNMTIwOTAxMDYyODQ5WjCByTEYMBYGCCqFAwOB\n"
    "AwEBEwoxMjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNV\n"
    "BAYTAlJVMRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+\n"
    "BEgEOgQwBEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4E\n"
    "MgRLBDUAIAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEDCB\n"
    "nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3pPaMYmxtliOKKYEywW1PShh7uKL\n"
    "snbIheoFBkXXpVavlYOk6vHBhBdi5S87hz2TJS9MW2GQ28xrd3r/eCjq8Bpd/4af\n"
    "D2NgIeupuvlAHZSNXu1kxpG0fjorFGDTHFhdmYuRA5gs1pUXbaosXC9qtVWXXKXb\n"
    "++1Ft4dvIicRqTMCAwEAAaOCAT4wggE6MB0GA1UdDgQWBBTAN2kYPAnPc2Py7WLG\n"
    "vlOLrvEzQjALBgNVHQ8EBAMCA9gwDwYDVR0TBAgwBgEB/wIBATCB+gYDVR0BBIHy\n"
    "MIHvgBTAN2kYPAnPc2Py7WLGvlOLrvEzQqGBzDCByTEYMBYGCCqFAwOBAwEBEwox\n"
    "MjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNVBAYTAlJV\n"
    "MRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+BEgEOgQw\n"
    "BEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4EMgRLBDUA\n"
    "IAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEIIIBNz+MS47\n"
    "pgAwDQYJKoZIhvcNAQEFBQADgYEAnf8i4SvPxxBwM1FC8WMu10r2wjwTzOSyQ8fr\n"
    "RlI9hvEEgeXAz0altPyjdYZ+rr9a8YAwDvDuj1YWe95B1bB7VtYpkBRyzjhAh7Ic\n"
    "phQbkDWgXTU4DYAXGT5Bf+C3NS+WSww81DbrhOeq7I4ALL+TLKcYucK/yGMA08Vn\n"
    "W1pCWV0=\n"
    "-----END CERTIFICATE-----\n"
    "-----BEGIN CERTIFICATE-----\n"
    "MIIEUTCCA7qgAwIBAgIIBNz+MS47pgAwDQYJKoZIhvcNAQEFBQAwgckxGDAWBggq\n"
    "hQMDgQMBARMKMTIzNDU2Nzg5MDEYMBYGCSqGSIb3DQEJARYJbWQ1QGJrLnJ1MQsw\n"
    "CQYDVQQGEwJSVTEZMBcGA1UECB4QBBwEMARABDgEOQAgBC0EOzEdMBsGA1UEBx4U\n"
    "BBkEPgRIBDoEMARAAC0EHgQ7BDAxOzA5BgNVBAoeMgQeBB4EHgAgACIEJgQ4BEQE\n"
    "QAQ+BDIESwQ1ACAEIgQ1BEUEPQQ+BDsEPgQzBDgEOAAiMQ8wDQYDVQQDHgYEIAQh\n"
    "BBAwHhcNMTEwOTAxMDYyODQ5WhcNMTIwOTAxMDYyODQ5WjCByTEYMBYGCCqFAwOB\n"
    "AwEBEwoxMjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNV\n"
    "BAYTAlJVMRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+\n"
    "BEgEOgQwBEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4E\n"
    "MgRLBDUAIAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEDCB\n"
    "nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3pPaMYmxtliOKKYEywW1PShh7uKL\n"
    "snbIheoFBkXXpVavlYOk6vHBhBdi5S87hz2TJS9MW2GQ28xrd3r/eCjq8Bpd/4af\n"
    "D2NgIeupuvlAHZSNXu1kxpG0fjorFGDTHFhdmYuRA5gs1pUXbaosXC9qtVWXXKXb\n"
    "++1Ft4dvIicRqTMCAwEAAaOCAT4wggE6MB0GA1UdDgQWBBTAN2kYPAnPc2Py7WLG\n"
    "vlOLrvEzQjALBgNVHQ8EBAMCA9gwDwYDVR0TBAgwBgEB/wIBATCB+gYDVR0BBIHy\n"
    "MIHvgBTAN2kYPAnPc2Py7WLGvlOLrvEzQqGBzDCByTEYMBYGCCqFAwOBAwEBEwox\n"
    "MjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNVBAYTAlJV\n"
    "MRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+BEgEOgQw\n"
    "BEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4EMgRLBDUA\n"
    "IAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEIIIBNz+MS47\n"
    "pgAwDQYJKoZIhvcNAQEFBQADgYEAnf8i4SvPxxBwM1FC8WMu10r2wjwTzOSyQ8fr\n"
    "RlI9hvEEgeXAz0altPyjdYZ+rr9a8YAwDvDuj1YWe95B1bB7VtYpkBRyzjhAh7Ic\n"
    "phQbkDWgXTU4DYAXGT5Bf+C3NS+WSww81DbrhOeq7I4ALL+TLKcYucK/yGMA08Vn\n"
    "W1pCWV0=\n"
    "-----END CERTIFICATE-----\n"
    "-----BEGIN CERTIFICATE-----\n"
    "MIIEUTCCA7qgAwIBAgIIBNz+MS47pgAwDQYJKoZIhvcNAQEFBQAwgckxGDAWBggq\n"
    "hQMDgQMBARMKMTIzNDU2Nzg5MDEYMBYGCSqGSIb3DQEJARYJbWQ1QGJrLnJ1MQsw\n"
    "CQYDVQQGEwJSVTEZMBcGA1UECB4QBBwEMARABDgEOQAgBC0EOzEdMBsGA1UEBx4U\n"
    "BBkEPgRIBDoEMARAAC0EHgQ7BDAxOzA5BgNVBAoeMgQeBB4EHgAgACIEJgQ4BEQE\n"
    "QAQ+BDIESwQ1ACAEIgQ1BEUEPQQ+BDsEPgQzBDgEOAAiMQ8wDQYDVQQDHgYEIAQh\n"
    "BBAwHhcNMTEwOTAxMDYyODQ5WhcNMTIwOTAxMDYyODQ5WjCByTEYMBYGCCqFAwOB\n"
    "AwEBEwoxMjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNV\n"
    "BAYTAlJVMRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+\n"
    "BEgEOgQwBEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4E\n"
    "MgRLBDUAIAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEDCB\n"
    "nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3pPaMYmxtliOKKYEywW1PShh7uKL\n"
    "snbIheoFBkXXpVavlYOk6vHBhBdi5S87hz2TJS9MW2GQ28xrd3r/eCjq8Bpd/4af\n"
    "D2NgIeupuvlAHZSNXu1kxpG0fjorFGDTHFhdmYuRA5gs1pUXbaosXC9qtVWXXKXb\n"
    "++1Ft4dvIicRqTMCAwEAAaOCAT4wggE6MB0GA1UdDgQWBBTAN2kYPAnPc2Py7WLG\n"
    "vlOLrvEzQjALBgNVHQ8EBAMCA9gwDwYDVR0TBAgwBgEB/wIBATCB+gYDVR0BBIHy\n"
    "MIHvgBTAN2kYPAnPc2Py7WLGvlOLrvEzQqGBzDCByTEYMBYGCCqFAwOBAwEBEwox\n"
    "MjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNVBAYTAlJV\n"
    "MRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+BEgEOgQw\n"
    "BEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4EMgRLBDUA\n"
    "IAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEIIIBNz+MS47\n"
    "pgAwDQYJKoZIhvcNAQEFBQADgYEAnf8i4SvPxxBwM1FC8WMu10r2wjwTzOSyQ8fr\n"
    "RlI9hvEEgeXAz0altPyjdYZ+rr9a8YAwDvDuj1YWe95B1bB7VtYpkBRyzjhAh7Ic\n"
    "phQbkDWgXTU4DYAXGT5Bf+C3NS+WSww81DbrhOeq7I4ALL+TLKcYucK/yGMA08Vn\n"
    "W1pCWV0=\n"
    "-----END CERTIFICATE-----\n"
    "-----BEGIN CERTIFICATE-----\n"
    "MIIEUTCCA7qgAwIBAgIIBNz+MS47pgAwDQYJKoZIhvcNAQEFBQAwgckxGDAWBggq\n"
    "hQMDgQMBARMKMTIzNDU2Nzg5MDEYMBYGCSqGSIb3DQEJARYJbWQ1QGJrLnJ1MQsw\n"
    "CQYDVQQGEwJSVTEZMBcGA1UECB4QBBwEMARABDgEOQAgBC0EOzEdMBsGA1UEBx4U\n"
    "BBkEPgRIBDoEMARAAC0EHgQ7BDAxOzA5BgNVBAoeMgQeBB4EHgAgACIEJgQ4BEQE\n"
    "QAQ+BDIESwQ1ACAEIgQ1BEUEPQQ+BDsEPgQzBDgEOAAiMQ8wDQYDVQQDHgYEIAQh\n"
    "BBAwHhcNMTEwOTAxMDYyODQ5WhcNMTIwOTAxMDYyODQ5WjCByTEYMBYGCCqFAwOB\n"
    "AwEBEwoxMjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNV\n"
    "BAYTAlJVMRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+\n"
    "BEgEOgQwBEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4E\n"
    "MgRLBDUAIAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEDCB\n"
    "nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3pPaMYmxtliOKKYEywW1PShh7uKL\n"
    "snbIheoFBkXXpVavlYOk6vHBhBdi5S87hz2TJS9MW2GQ28xrd3r/eCjq8Bpd/4af\n"
    "D2NgIeupuvlAHZSNXu1kxpG0fjorFGDTHFhdmYuRA5gs1pUXbaosXC9qtVWXXKXb\n"
    "++1Ft4dvIicRqTMCAwEAAaOCAT4wggE6MB0GA1UdDgQWBBTAN2kYPAnPc2Py7WLG\n"
    "vlOLrvEzQjALBgNVHQ8EBAMCA9gwDwYDVR0TBAgwBgEB/wIBATCB+gYDVR0BBIHy\n"
    "MIHvgBTAN2kYPAnPc2Py7WLGvlOLrvEzQqGBzDCByTEYMBYGCCqFAwOBAwEBEwox\n"
    "MjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNVBAYTAlJV\n"
    "MRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+BEgEOgQw\n"
    "BEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4EMgRLBDUA\n"
    "IAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEIIIBNz+MS47\n"
    "pgAwDQYJKoZIhvcNAQEFBQADgYEAnf8i4SvPxxBwM1FC8WMu10r2wjwTzOSyQ8fr\n"
    "RlI9hvEEgeXAz0altPyjdYZ+rr9a8YAwDvDuj1YWe95B1bB7VtYpkBRyzjhAh7Ic\n"
    "phQbkDWgXTU4DYAXGT5Bf+C3NS+WSww81DbrhOeq7I4ALL+TLKcYucK/yGMA08Vn\n"
    "W1pCWV0=\n"
    "-----END CERTIFICATE-----\n"
    "-----BEGIN CERTIFICATE-----\n"
    "MIIEUTCCA7qgAwIBAgIIBNz+MS47pgAwDQYJKoZIhvcNAQEFBQAwgckxGDAWBggq\n"
    "hQMDgQMBARMKMTIzNDU2Nzg5MDEYMBYGCSqGSIb3DQEJARYJbWQ1QGJrLnJ1MQsw\n"
    "CQYDVQQGEwJSVTEZMBcGA1UECB4QBBwEMARABDgEOQAgBC0EOzEdMBsGA1UEBx4U\n"
    "BBkEPgRIBDoEMARAAC0EHgQ7BDAxOzA5BgNVBAoeMgQeBB4EHgAgACIEJgQ4BEQE\n"
    "QAQ+BDIESwQ1ACAEIgQ1BEUEPQQ+BDsEPgQzBDgEOAAiMQ8wDQYDVQQDHgYEIAQh\n"
    "BBAwHhcNMTEwOTAxMDYyODQ5WhcNMTIwOTAxMDYyODQ5WjCByTEYMBYGCCqFAwOB\n"
    "AwEBEwoxMjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNV\n"
    "BAYTAlJVMRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+\n"
    "BEgEOgQwBEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4E\n"
    "MgRLBDUAIAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEDCB\n"
    "nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3pPaMYmxtliOKKYEywW1PShh7uKL\n"
    "snbIheoFBkXXpVavlYOk6vHBhBdi5S87hz2TJS9MW2GQ28xrd3r/eCjq8Bpd/4af\n"
    "D2NgIeupuvlAHZSNXu1kxpG0fjorFGDTHFhdmYuRA5gs1pUXbaosXC9qtVWXXKXb\n"
    "++1Ft4dvIicRqTMCAwEAAaOCAT4wggE6MB0GA1UdDgQWBBTAN2kYPAnPc2Py7WLG\n"
    "vlOLrvEzQjALBgNVHQ8EBAMCA9gwDwYDVR0TBAgwBgEB/wIBATCB+gYDVR0BBIHy\n"
    "MIHvgBTAN2kYPAnPc2Py7WLGvlOLrvEzQqGBzDCByTEYMBYGCCqFAwOBAwEBEwox\n"
    "MjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNVBAYTAlJV\n"
    "MRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+BEgEOgQw\n"
    "BEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4EMgRLBDUA\n"
    "IAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEIIIBNz+MS47\n"
    "pgAwDQYJKoZIhvcNAQEFBQADgYEAnf8i4SvPxxBwM1FC8WMu10r2wjwTzOSyQ8fr\n"
    "RlI9hvEEgeXAz0altPyjdYZ+rr9a8YAwDvDuj1YWe95B1bB7VtYpkBRyzjhAh7Ic\n"
    "phQbkDWgXTU4DYAXGT5Bf+C3NS+WSww81DbrhOeq7I4ALL+TLKcYucK/yGMA08Vn\n"
    "W1pCWV0=\n"
    "-----END CERTIFICATE-----\n"
    "-----BEGIN CERTIFICATE-----\n"
    "MIIEUTCCA7qgAwIBAgIIBNz+MS47pgAwDQYJKoZIhvcNAQEFBQAwgckxGDAWBggq\n"
    "hQMDgQMBARMKMTIzNDU2Nzg5MDEYMBYGCSqGSIb3DQEJARYJbWQ1QGJrLnJ1MQsw\n"
    "CQYDVQQGEwJSVTEZMBcGA1UECB4QBBwEMARABDgEOQAgBC0EOzEdMBsGA1UEBx4U\n"
    "BBkEPgRIBDoEMARAAC0EHgQ7BDAxOzA5BgNVBAoeMgQeBB4EHgAgACIEJgQ4BEQE\n"
    "QAQ+BDIESwQ1ACAEIgQ1BEUEPQQ+BDsEPgQzBDgEOAAiMQ8wDQYDVQQDHgYEIAQh\n"
    "BBAwHhcNMTEwOTAxMDYyODQ5WhcNMTIwOTAxMDYyODQ5WjCByTEYMBYGCCqFAwOB\n"
    "AwEBEwoxMjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNV\n"
    "BAYTAlJVMRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+\n"
    "BEgEOgQwBEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4E\n"
    "MgRLBDUAIAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEDCB\n"
    "nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3pPaMYmxtliOKKYEywW1PShh7uKL\n"
    "snbIheoFBkXXpVavlYOk6vHBhBdi5S87hz2TJS9MW2GQ28xrd3r/eCjq8Bpd/4af\n"
    "D2NgIeupuvlAHZSNXu1kxpG0fjorFGDTHFhdmYuRA5gs1pUXbaosXC9qtVWXXKXb\n"
    "++1Ft4dvIicRqTMCAwEAAaOCAT4wggE6MB0GA1UdDgQWBBTAN2kYPAnPc2Py7WLG\n"
    "vlOLrvEzQjALBgNVHQ8EBAMCA9gwDwYDVR0TBAgwBgEB/wIBATCB+gYDVR0BBIHy\n"
    "MIHvgBTAN2kYPAnPc2Py7WLGvlOLrvEzQqGBzDCByTEYMBYGCCqFAwOBAwEBEwox\n"
    "MjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNVBAYTAlJV\n"
    "MRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+BEgEOgQw\n"
    "BEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4EMgRLBDUA\n"
    "IAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEIIIBNz+MS47\n"
    "pgAwDQYJKoZIhvcNAQEFBQADgYEAnf8i4SvPxxBwM1FC8WMu10r2wjwTzOSyQ8fr\n"
    "RlI9hvEEgeXAz0altPyjdYZ+rr9a8YAwDvDuj1YWe95B1bB7VtYpkBRyzjhAh7Ic\n"
    "phQbkDWgXTU4DYAXGT5Bf+C3NS+WSww81DbrhOeq7I4ALL+TLKcYucK/yGMA08Vn\n"
    "W1pCWV0=\n"
    "-----END CERTIFICATE-----\n"
    "-----BEGIN CERTIFICATE-----\n"
    "MIIEUTCCA7qgAwIBAgIIBNz+MS47pgAwDQYJKoZIhvcNAQEFBQAwgckxGDAWBggq\n"
    "hQMDgQMBARMKMTIzNDU2Nzg5MDEYMBYGCSqGSIb3DQEJARYJbWQ1QGJrLnJ1MQsw\n"
    "CQYDVQQGEwJSVTEZMBcGA1UECB4QBBwEMARABDgEOQAgBC0EOzEdMBsGA1UEBx4U\n"
    "BBkEPgRIBDoEMARAAC0EHgQ7BDAxOzA5BgNVBAoeMgQeBB4EHgAgACIEJgQ4BEQE\n"
    "QAQ+BDIESwQ1ACAEIgQ1BEUEPQQ+BDsEPgQzBDgEOAAiMQ8wDQYDVQQDHgYEIAQh\n"
    "BBAwHhcNMTEwOTAxMDYyODQ5WhcNMTIwOTAxMDYyODQ5WjCByTEYMBYGCCqFAwOB\n"
    "AwEBEwoxMjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNV\n"
    "BAYTAlJVMRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+\n"
    "BEgEOgQwBEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4E\n"
    "MgRLBDUAIAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEDCB\n"
    "nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3pPaMYmxtliOKKYEywW1PShh7uKL\n"
    "snbIheoFBkXXpVavlYOk6vHBhBdi5S87hz2TJS9MW2GQ28xrd3r/eCjq8Bpd/4af\n"
    "D2NgIeupuvlAHZSNXu1kxpG0fjorFGDTHFhdmYuRA5gs1pUXbaosXC9qtVWXXKXb\n"
    "++1Ft4dvIicRqTMCAwEAAaOCAT4wggE6MB0GA1UdDgQWBBTAN2kYPAnPc2Py7WLG\n"
    "vlOLrvEzQjALBgNVHQ8EBAMCA9gwDwYDVR0TBAgwBgEB/wIBATCB+gYDVR0BBIHy\n"
    "MIHvgBTAN2kYPAnPc2Py7WLGvlOLrvEzQqGBzDCByTEYMBYGCCqFAwOBAwEBEwox\n"
    "MjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNVBAYTAlJV\n"
    "MRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+BEgEOgQw\n"
    "BEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4EMgRLBDUA\n"
    "IAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEIIIBNz+MS47\n"
    "pgAwDQYJKoZIhvcNAQEFBQADgYEAnf8i4SvPxxBwM1FC8WMu10r2wjwTzOSyQ8fr\n"
    "RlI9hvEEgeXAz0altPyjdYZ+rr9a8YAwDvDuj1YWe95B1bB7VtYpkBRyzjhAh7Ic\n"
    "phQbkDWgXTU4DYAXGT5Bf+C3NS+WSww81DbrhOeq7I4ALL+TLKcYucK/yGMA08Vn\n"
    "W1pCWV0=\n"
    "-----END CERTIFICATE-----\n"
    "-----BEGIN CERTIFICATE-----\n"
    "MIIEUTCCA7qgAwIBAgIIBNz+MS47pgAwDQYJKoZIhvcNAQEFBQAwgckxGDAWBggq\n"
    "hQMDgQMBARMKMTIzNDU2Nzg5MDEYMBYGCSqGSIb3DQEJARYJbWQ1QGJrLnJ1MQsw\n"
    "CQYDVQQGEwJSVTEZMBcGA1UECB4QBBwEMARABDgEOQAgBC0EOzEdMBsGA1UEBx4U\n"
    "BBkEPgRIBDoEMARAAC0EHgQ7BDAxOzA5BgNVBAoeMgQeBB4EHgAgACIEJgQ4BEQE\n"
    "QAQ+BDIESwQ1ACAEIgQ1BEUEPQQ+BDsEPgQzBDgEOAAiMQ8wDQYDVQQDHgYEIAQh\n"
    "BBAwHhcNMTEwOTAxMDYyODQ5WhcNMTIwOTAxMDYyODQ5WjCByTEYMBYGCCqFAwOB\n"
    "AwEBEwoxMjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNV\n"
    "BAYTAlJVMRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+\n"
    "BEgEOgQwBEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4E\n"
    "MgRLBDUAIAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEDCB\n"
    "nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3pPaMYmxtliOKKYEywW1PShh7uKL\n"
    "snbIheoFBkXXpVavlYOk6vHBhBdi5S87hz2TJS9MW2GQ28xrd3r/eCjq8Bpd/4af\n"
    "D2NgIeupuvlAHZSNXu1kxpG0fjorFGDTHFhdmYuRA5gs1pUXbaosXC9qtVWXXKXb\n"
    "++1Ft4dvIicRqTMCAwEAAaOCAT4wggE6MB0GA1UdDgQWBBTAN2kYPAnPc2Py7WLG\n"
    "vlOLrvEzQjALBgNVHQ8EBAMCA9gwDwYDVR0TBAgwBgEB/wIBATCB+gYDVR0BBIHy\n"
    "MIHvgBTAN2kYPAnPc2Py7WLGvlOLrvEzQqGBzDCByTEYMBYGCCqFAwOBAwEBEwox\n"
    "MjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNVBAYTAlJV\n"
    "MRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+BEgEOgQw\n"
    "BEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4EMgRLBDUA\n"
    "IAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEIIIBNz+MS47\n"
    "pgAwDQYJKoZIhvcNAQEFBQADgYEAnf8i4SvPxxBwM1FC8WMu10r2wjwTzOSyQ8fr\n"
    "RlI9hvEEgeXAz0altPyjdYZ+rr9a8YAwDvDuj1YWe95B1bB7VtYpkBRyzjhAh7Ic\n"
    "phQbkDWgXTU4DYAXGT5Bf+C3NS+WSww81DbrhOeq7I4ALL+TLKcYucK/yGMA08Vn\n"
    "W1pCWV0=\n"
    "-----END CERTIFICATE-----\n"
    "-----BEGIN CERTIFICATE-----\n"
    "MIIEUTCCA7qgAwIBAgIIBNz+MS47pgAwDQYJKoZIhvcNAQEFBQAwgckxGDAWBggq\n"
    "hQMDgQMBARMKMTIzNDU2Nzg5MDEYMBYGCSqGSIb3DQEJARYJbWQ1QGJrLnJ1MQsw\n"
    "CQYDVQQGEwJSVTEZMBcGA1UECB4QBBwEMARABDgEOQAgBC0EOzEdMBsGA1UEBx4U\n"
    "BBkEPgRIBDoEMARAAC0EHgQ7BDAxOzA5BgNVBAoeMgQeBB4EHgAgACIEJgQ4BEQE\n"
    "QAQ+BDIESwQ1ACAEIgQ1BEUEPQQ+BDsEPgQzBDgEOAAiMQ8wDQYDVQQDHgYEIAQh\n"
    "BBAwHhcNMTEwOTAxMDYyODQ5WhcNMTIwOTAxMDYyODQ5WjCByTEYMBYGCCqFAwOB\n"
    "AwEBEwoxMjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNV\n"
    "BAYTAlJVMRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+\n"
    "BEgEOgQwBEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4E\n"
    "MgRLBDUAIAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEDCB\n"
    "nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3pPaMYmxtliOKKYEywW1PShh7uKL\n"
    "snbIheoFBkXXpVavlYOk6vHBhBdi5S87hz2TJS9MW2GQ28xrd3r/eCjq8Bpd/4af\n"
    "D2NgIeupuvlAHZSNXu1kxpG0fjorFGDTHFhdmYuRA5gs1pUXbaosXC9qtVWXXKXb\n"
    "++1Ft4dvIicRqTMCAwEAAaOCAT4wggE6MB0GA1UdDgQWBBTAN2kYPAnPc2Py7WLG\n"
    "vlOLrvEzQjALBgNVHQ8EBAMCA9gwDwYDVR0TBAgwBgEB/wIBATCB+gYDVR0BBIHy\n"
    "MIHvgBTAN2kYPAnPc2Py7WLGvlOLrvEzQqGBzDCByTEYMBYGCCqFAwOBAwEBEwox\n"
    "MjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNVBAYTAlJV\n"
    "MRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+BEgEOgQw\n"
    "BEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4EMgRLBDUA\n"
    "IAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEIIIBNz+MS47\n"
    "pgAwDQYJKoZIhvcNAQEFBQADgYEAnf8i4SvPxxBwM1FC8WMu10r2wjwTzOSyQ8fr\n"
    "RlI9hvEEgeXAz0altPyjdYZ+rr9a8YAwDvDuj1YWe95B1bB7VtYpkBRyzjhAh7Ic\n"
    "phQbkDWgXTU4DYAXGT5Bf+C3NS+WSww81DbrhOeq7I4ALL+TLKcYucK/yGMA08Vn\n"
    "W1pCWV0=\n"
    "-----END CERTIFICATE-----\n"
    "-----BEGIN CERTIFICATE-----\n"
    "MIIEUTCCA7qgAwIBAgIIBNz+MS47pgAwDQYJKoZIhvcNAQEFBQAwgckxGDAWBggq\n"
    "hQMDgQMBARMKMTIzNDU2Nzg5MDEYMBYGCSqGSIb3DQEJARYJbWQ1QGJrLnJ1MQsw\n"
    "CQYDVQQGEwJSVTEZMBcGA1UECB4QBBwEMARABDgEOQAgBC0EOzEdMBsGA1UEBx4U\n"
    "BBkEPgRIBDoEMARAAC0EHgQ7BDAxOzA5BgNVBAoeMgQeBB4EHgAgACIEJgQ4BEQE\n"
    "QAQ+BDIESwQ1ACAEIgQ1BEUEPQQ+BDsEPgQzBDgEOAAiMQ8wDQYDVQQDHgYEIAQh\n"
    "BBAwHhcNMTEwOTAxMDYyODQ5WhcNMTIwOTAxMDYyODQ5WjCByTEYMBYGCCqFAwOB\n"
    "AwEBEwoxMjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNV\n"
    "BAYTAlJVMRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+\n"
    "BEgEOgQwBEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4E\n"
    "MgRLBDUAIAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEDCB\n"
    "nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3pPaMYmxtliOKKYEywW1PShh7uKL\n"
    "snbIheoFBkXXpVavlYOk6vHBhBdi5S87hz2TJS9MW2GQ28xrd3r/eCjq8Bpd/4af\n"
    "D2NgIeupuvlAHZSNXu1kxpG0fjorFGDTHFhdmYuRA5gs1pUXbaosXC9qtVWXXKXb\n"
    "++1Ft4dvIicRqTMCAwEAAaOCAT4wggE6MB0GA1UdDgQWBBTAN2kYPAnPc2Py7WLG\n"
    "vlOLrvEzQjALBgNVHQ8EBAMCA9gwDwYDVR0TBAgwBgEB/wIBATCB+gYDVR0BBIHy\n"
    "MIHvgBTAN2kYPAnPc2Py7WLGvlOLrvEzQqGBzDCByTEYMBYGCCqFAwOBAwEBEwox\n"
    "MjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNVBAYTAlJV\n"
    "MRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+BEgEOgQw\n"
    "BEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4EMgRLBDUA\n"
    "IAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEIIIBNz+MS47\n"
    "pgAwDQYJKoZIhvcNAQEFBQADgYEAnf8i4SvPxxBwM1FC8WMu10r2wjwTzOSyQ8fr\n"
    "RlI9hvEEgeXAz0altPyjdYZ+rr9a8YAwDvDuj1YWe95B1bB7VtYpkBRyzjhAh7Ic\n"
    "phQbkDWgXTU4DYAXGT5Bf+C3NS+WSww81DbrhOeq7I4ALL+TLKcYucK/yGMA08Vn\n"
    "W1pCWV0=\n"
    "-----END CERTIFICATE-----\n"
    "-----BEGIN CERTIFICATE-----\n"
    "MIIEUTCCA7qgAwIBAgIIBNz+MS47pgAwDQYJKoZIhvcNAQEFBQAwgckxGDAWBggq\n"
    "hQMDgQMBARMKMTIzNDU2Nzg5MDEYMBYGCSqGSIb3DQEJARYJbWQ1QGJrLnJ1MQsw\n"
    "CQYDVQQGEwJSVTEZMBcGA1UECB4QBBwEMARABDgEOQAgBC0EOzEdMBsGA1UEBx4U\n"
    "BBkEPgRIBDoEMARAAC0EHgQ7BDAxOzA5BgNVBAoeMgQeBB4EHgAgACIEJgQ4BEQE\n"
    "QAQ+BDIESwQ1ACAEIgQ1BEUEPQQ+BDsEPgQzBDgEOAAiMQ8wDQYDVQQDHgYEIAQh\n"
    "BBAwHhcNMTEwOTAxMDYyODQ5WhcNMTIwOTAxMDYyODQ5WjCByTEYMBYGCCqFAwOB\n"
    "AwEBEwoxMjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNV\n"
    "BAYTAlJVMRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+\n"
    "BEgEOgQwBEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4E\n"
    "MgRLBDUAIAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEDCB\n"
    "nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3pPaMYmxtliOKKYEywW1PShh7uKL\n"
    "snbIheoFBkXXpVavlYOk6vHBhBdi5S87hz2TJS9MW2GQ28xrd3r/eCjq8Bpd/4af\n"
    "D2NgIeupuvlAHZSNXu1kxpG0fjorFGDTHFhdmYuRA5gs1pUXbaosXC9qtVWXXKXb\n"
    "++1Ft4dvIicRqTMCAwEAAaOCAT4wggE6MB0GA1UdDgQWBBTAN2kYPAnPc2Py7WLG\n"
    "vlOLrvEzQjALBgNVHQ8EBAMCA9gwDwYDVR0TBAgwBgEB/wIBATCB+gYDVR0BBIHy\n"
    "MIHvgBTAN2kYPAnPc2Py7WLGvlOLrvEzQqGBzDCByTEYMBYGCCqFAwOBAwEBEwox\n"
    "MjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNVBAYTAlJV\n"
    "MRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+BEgEOgQw\n"
    "BEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4EMgRLBDUA\n"
    "IAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEIIIBNz+MS47\n"
    "pgAwDQYJKoZIhvcNAQEFBQADgYEAnf8i4SvPxxBwM1FC8WMu10r2wjwTzOSyQ8fr\n"
    "RlI9hvEEgeXAz0altPyjdYZ+rr9a8YAwDvDuj1YWe95B1bB7VtYpkBRyzjhAh7Ic\n"
    "phQbkDWgXTU4DYAXGT5Bf+C3NS+WSww81DbrhOeq7I4ALL+TLKcYucK/yGMA08Vn\n"
    "W1pCWV0=\n"
    "-----END CERTIFICATE-----\n"
    "-----BEGIN CERTIFICATE-----\n"
    "MIIEUTCCA7qgAwIBAgIIBNz+MS47pgAwDQYJKoZIhvcNAQEFBQAwgckxGDAWBggq\n"
    "hQMDgQMBARMKMTIzNDU2Nzg5MDEYMBYGCSqGSIb3DQEJARYJbWQ1QGJrLnJ1MQsw\n"
    "CQYDVQQGEwJSVTEZMBcGA1UECB4QBBwEMARABDgEOQAgBC0EOzEdMBsGA1UEBx4U\n"
    "BBkEPgRIBDoEMARAAC0EHgQ7BDAxOzA5BgNVBAoeMgQeBB4EHgAgACIEJgQ4BEQE\n"
    "QAQ+BDIESwQ1ACAEIgQ1BEUEPQQ+BDsEPgQzBDgEOAAiMQ8wDQYDVQQDHgYEIAQh\n"
    "BBAwHhcNMTEwOTAxMDYyODQ5WhcNMTIwOTAxMDYyODQ5WjCByTEYMBYGCCqFAwOB\n"
    "AwEBEwoxMjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNV\n"
    "BAYTAlJVMRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+\n"
    "BEgEOgQwBEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4E\n"
    "MgRLBDUAIAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEDCB\n"
    "nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3pPaMYmxtliOKKYEywW1PShh7uKL\n"
    "snbIheoFBkXXpVavlYOk6vHBhBdi5S87hz2TJS9MW2GQ28xrd3r/eCjq8Bpd/4af\n"
    "D2NgIeupuvlAHZSNXu1kxpG0fjorFGDTHFhdmYuRA5gs1pUXbaosXC9qtVWXXKXb\n"
    "++1Ft4dvIicRqTMCAwEAAaOCAT4wggE6MB0GA1UdDgQWBBTAN2kYPAnPc2Py7WLG\n"
    "vlOLrvEzQjALBgNVHQ8EBAMCA9gwDwYDVR0TBAgwBgEB/wIBATCB+gYDVR0BBIHy\n"
    "MIHvgBTAN2kYPAnPc2Py7WLGvlOLrvEzQqGBzDCByTEYMBYGCCqFAwOBAwEBEwox\n"
    "MjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNVBAYTAlJV\n"
    "MRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+BEgEOgQw\n"
    "BEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4EMgRLBDUA\n"
    "IAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEIIIBNz+MS47\n"
    "pgAwDQYJKoZIhvcNAQEFBQADgYEAnf8i4SvPxxBwM1FC8WMu10r2wjwTzOSyQ8fr\n"
    "RlI9hvEEgeXAz0altPyjdYZ+rr9a8YAwDvDuj1YWe95B1bB7VtYpkBRyzjhAh7Ic\n"
    "phQbkDWgXTU4DYAXGT5Bf+C3NS+WSww81DbrhOeq7I4ALL+TLKcYucK/yGMA08Vn\n"
    "W1pCWV0=\n"
    "-----END CERTIFICATE-----\n"
    "-----BEGIN CERTIFICATE-----\n"
    "MIIEUTCCA7qgAwIBAgIIBNz+MS47pgAwDQYJKoZIhvcNAQEFBQAwgckxGDAWBggq\n"
    "hQMDgQMBARMKMTIzNDU2Nzg5MDEYMBYGCSqGSIb3DQEJARYJbWQ1QGJrLnJ1MQsw\n"
    "CQYDVQQGEwJSVTEZMBcGA1UECB4QBBwEMARABDgEOQAgBC0EOzEdMBsGA1UEBx4U\n"
    "BBkEPgRIBDoEMARAAC0EHgQ7BDAxOzA5BgNVBAoeMgQeBB4EHgAgACIEJgQ4BEQE\n"
    "QAQ+BDIESwQ1ACAEIgQ1BEUEPQQ+BDsEPgQzBDgEOAAiMQ8wDQYDVQQDHgYEIAQh\n"
    "BBAwHhcNMTEwOTAxMDYyODQ5WhcNMTIwOTAxMDYyODQ5WjCByTEYMBYGCCqFAwOB\n"
    "AwEBEwoxMjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNV\n"
    "BAYTAlJVMRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+\n"
    "BEgEOgQwBEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4E\n"
    "MgRLBDUAIAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEDCB\n"
    "nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3pPaMYmxtliOKKYEywW1PShh7uKL\n"
    "snbIheoFBkXXpVavlYOk6vHBhBdi5S87hz2TJS9MW2GQ28xrd3r/eCjq8Bpd/4af\n"
    "D2NgIeupuvlAHZSNXu1kxpG0fjorFGDTHFhdmYuRA5gs1pUXbaosXC9qtVWXXKXb\n"
    "++1Ft4dvIicRqTMCAwEAAaOCAT4wggE6MB0GA1UdDgQWBBTAN2kYPAnPc2Py7WLG\n"
    "vlOLrvEzQjALBgNVHQ8EBAMCA9gwDwYDVR0TBAgwBgEB/wIBATCB+gYDVR0BBIHy\n"
    "MIHvgBTAN2kYPAnPc2Py7WLGvlOLrvEzQqGBzDCByTEYMBYGCCqFAwOBAwEBEwox\n"
    "MjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNVBAYTAlJV\n"
    "MRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+BEgEOgQw\n"
    "BEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4EMgRLBDUA\n"
    "IAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEIIIBNz+MS47\n"
    "pgAwDQYJKoZIhvcNAQEFBQADgYEAnf8i4SvPxxBwM1FC8WMu10r2wjwTzOSyQ8fr\n"
    "RlI9hvEEgeXAz0altPyjdYZ+rr9a8YAwDvDuj1YWe95B1bB7VtYpkBRyzjhAh7Ic\n"
    "phQbkDWgXTU4DYAXGT5Bf+C3NS+WSww81DbrhOeq7I4ALL+TLKcYucK/yGMA08Vn\n"
    "W1pCWV0=\n"
    "-----END CERTIFICATE-----\n"
    "-----BEGIN CERTIFICATE-----\n"
    "MIIEUTCCA7qgAwIBAgIIBNz+MS47pgAwDQYJKoZIhvcNAQEFBQAwgckxGDAWBggq\n"
    "hQMDgQMBARMKMTIzNDU2Nzg5MDEYMBYGCSqGSIb3DQEJARYJbWQ1QGJrLnJ1MQsw\n"
    "CQYDVQQGEwJSVTEZMBcGA1UECB4QBBwEMARABDgEOQAgBC0EOzEdMBsGA1UEBx4U\n"
    "BBkEPgRIBDoEMARAAC0EHgQ7BDAxOzA5BgNVBAoeMgQeBB4EHgAgACIEJgQ4BEQE\n"
    "QAQ+BDIESwQ1ACAEIgQ1BEUEPQQ+BDsEPgQzBDgEOAAiMQ8wDQYDVQQDHgYEIAQh\n"
    "BBAwHhcNMTEwOTAxMDYyODQ5WhcNMTIwOTAxMDYyODQ5WjCByTEYMBYGCCqFAwOB\n"
    "AwEBEwoxMjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNV\n"
    "BAYTAlJVMRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+\n"
    "BEgEOgQwBEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4E\n"
    "MgRLBDUAIAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEDCB\n"
    "nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3pPaMYmxtliOKKYEywW1PShh7uKL\n"
    "snbIheoFBkXXpVavlYOk6vHBhBdi5S87hz2TJS9MW2GQ28xrd3r/eCjq8Bpd/4af\n"
    "D2NgIeupuvlAHZSNXu1kxpG0fjorFGDTHFhdmYuRA5gs1pUXbaosXC9qtVWXXKXb\n"
    "++1Ft4dvIicRqTMCAwEAAaOCAT4wggE6MB0GA1UdDgQWBBTAN2kYPAnPc2Py7WLG\n"
    "vlOLrvEzQjALBgNVHQ8EBAMCA9gwDwYDVR0TBAgwBgEB/wIBATCB+gYDVR0BBIHy\n"
    "MIHvgBTAN2kYPAnPc2Py7WLGvlOLrvEzQqGBzDCByTEYMBYGCCqFAwOBAwEBEwox\n"
    "MjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNVBAYTAlJV\n"
    "MRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+BEgEOgQw\n"
    "BEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4EMgRLBDUA\n"
    "IAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEIIIBNz+MS47\n"
    "pgAwDQYJKoZIhvcNAQEFBQADgYEAnf8i4SvPxxBwM1FC8WMu10r2wjwTzOSyQ8fr\n"
    "RlI9hvEEgeXAz0altPyjdYZ+rr9a8YAwDvDuj1YWe95B1bB7VtYpkBRyzjhAh7Ic\n"
    "phQbkDWgXTU4DYAXGT5Bf+C3NS+WSww81DbrhOeq7I4ALL+TLKcYucK/yGMA08Vn\n"
    "W1pCWV0=\n"
    "-----END CERTIFICATE-----\n"
    "-----BEGIN CERTIFICATE-----\n"
    "MIIEUTCCA7qgAwIBAgIIBNz+MS47pgAwDQYJKoZIhvcNAQEFBQAwgckxGDAWBggq\n"
    "hQMDgQMBARMKMTIzNDU2Nzg5MDEYMBYGCSqGSIb3DQEJARYJbWQ1QGJrLnJ1MQsw\n"
    "CQYDVQQGEwJSVTEZMBcGA1UECB4QBBwEMARABDgEOQAgBC0EOzEdMBsGA1UEBx4U\n"
    "BBkEPgRIBDoEMARAAC0EHgQ7BDAxOzA5BgNVBAoeMgQeBB4EHgAgACIEJgQ4BEQE\n"
    "QAQ+BDIESwQ1ACAEIgQ1BEUEPQQ+BDsEPgQzBDgEOAAiMQ8wDQYDVQQDHgYEIAQh\n"
    "BBAwHhcNMTEwOTAxMDYyODQ5WhcNMTIwOTAxMDYyODQ5WjCByTEYMBYGCCqFAwOB\n"
    "AwEBEwoxMjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNV\n"
    "BAYTAlJVMRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+\n"
    "BEgEOgQwBEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4E\n"
    "MgRLBDUAIAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEDCB\n"
    "nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3pPaMYmxtliOKKYEywW1PShh7uKL\n"
    "snbIheoFBkXXpVavlYOk6vHBhBdi5S87hz2TJS9MW2GQ28xrd3r/eCjq8Bpd/4af\n"
    "D2NgIeupuvlAHZSNXu1kxpG0fjorFGDTHFhdmYuRA5gs1pUXbaosXC9qtVWXXKXb\n"
    "++1Ft4dvIicRqTMCAwEAAaOCAT4wggE6MB0GA1UdDgQWBBTAN2kYPAnPc2Py7WLG\n"
    "vlOLrvEzQjALBgNVHQ8EBAMCA9gwDwYDVR0TBAgwBgEB/wIBATCB+gYDVR0BBIHy\n"
    "MIHvgBTAN2kYPAnPc2Py7WLGvlOLrvEzQqGBzDCByTEYMBYGCCqFAwOBAwEBEwox\n"
    "MjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNVBAYTAlJV\n"
    "MRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+BEgEOgQw\n"
    "BEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4EMgRLBDUA\n"
    "IAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEIIIBNz+MS47\n"
    "pgAwDQYJKoZIhvcNAQEFBQADgYEAnf8i4SvPxxBwM1FC8WMu10r2wjwTzOSyQ8fr\n"
    "RlI9hvEEgeXAz0altPyjdYZ+rr9a8YAwDvDuj1YWe95B1bB7VtYpkBRyzjhAh7Ic\n"
    "phQbkDWgXTU4DYAXGT5Bf+C3NS+WSww81DbrhOeq7I4ALL+TLKcYucK/yGMA08Vn\n"
    "W1pCWV0=\n"
    "-----END CERTIFICATE-----\n"
    "-----BEGIN CERTIFICATE-----\n"
    "MIIEUTCCA7qgAwIBAgIIBNz+MS47pgAwDQYJKoZIhvcNAQEFBQAwgckxGDAWBggq\n"
    "hQMDgQMBARMKMTIzNDU2Nzg5MDEYMBYGCSqGSIb3DQEJARYJbWQ1QGJrLnJ1MQsw\n"
    "CQYDVQQGEwJSVTEZMBcGA1UECB4QBBwEMARABDgEOQAgBC0EOzEdMBsGA1UEBx4U\n"
    "BBkEPgRIBDoEMARAAC0EHgQ7BDAxOzA5BgNVBAoeMgQeBB4EHgAgACIEJgQ4BEQE\n"
    "QAQ+BDIESwQ1ACAEIgQ1BEUEPQQ+BDsEPgQzBDgEOAAiMQ8wDQYDVQQDHgYEIAQh\n"
    "BBAwHhcNMTEwOTAxMDYyODQ5WhcNMTIwOTAxMDYyODQ5WjCByTEYMBYGCCqFAwOB\n"
    "AwEBEwoxMjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNV\n"
    "BAYTAlJVMRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+\n"
    "BEgEOgQwBEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4E\n"
    "MgRLBDUAIAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEDCB\n"
    "nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3pPaMYmxtliOKKYEywW1PShh7uKL\n"
    "snbIheoFBkXXpVavlYOk6vHBhBdi5S87hz2TJS9MW2GQ28xrd3r/eCjq8Bpd/4af\n"
    "D2NgIeupuvlAHZSNXu1kxpG0fjorFGDTHFhdmYuRA5gs1pUXbaosXC9qtVWXXKXb\n"
    "++1Ft4dvIicRqTMCAwEAAaOCAT4wggE6MB0GA1UdDgQWBBTAN2kYPAnPc2Py7WLG\n"
    "vlOLrvEzQjALBgNVHQ8EBAMCA9gwDwYDVR0TBAgwBgEB/wIBATCB+gYDVR0BBIHy\n"
    "MIHvgBTAN2kYPAnPc2Py7WLGvlOLrvEzQqGBzDCByTEYMBYGCCqFAwOBAwEBEwox\n"
    "MjM0NTY3ODkwMRgwFgYJKoZIhvcNAQkBFgltZDVAYmsucnUxCzAJBgNVBAYTAlJV\n"
    "MRkwFwYDVQQIHhAEHAQwBEAEOAQ5ACAELQQ7MR0wGwYDVQQHHhQEGQQ+BEgEOgQw\n"
    "BEAALQQeBDsEMDE7MDkGA1UECh4yBB4EHgQeACAAIgQmBDgERARABD4EMgRLBDUA\n"
    "IAQiBDUERQQ9BD4EOwQ+BDMEOAQ4ACIxDzANBgNVBAMeBgQgBCEEEIIIBNz+MS47\n"
    "pgAwDQYJKoZIhvcNAQEFBQADgYEAnf8i4SvPxxBwM1FC8WMu10r2wjwTzOSyQ8fr\n"
    "RlI9hvEEgeXAz0altPyjdYZ+rr9a8YAwDvDuj1YWe95B1bB7VtYpkBRyzjhAh7Ic\n"
    "phQbkDWgXTU4DYAXGT5Bf+C3NS+WSww81DbrhOeq7I4ALL+TLKcYucK/yGMA08Vn\n"
    "W1pCWV0=\n"
    "-----END CERTIFICATE-----\n"
    "-----BEGIN CERTIFICATE-----\n"                                                                                                                                                                                                                                                 
    "MIIFnTCCBUygAwIBAgIKSzaA5AAAAABZZTAIBgYqhQMCAgMwggEEMR4wHAYJKoZI\n"                                                                                                                                                                                                            
    "hvcNAQkBFg9jYUBza2Jrb250dXIucnUxCzAJBgNVBAYTAlJVMTMwMQYDVQQIDCo2\n"                                                                                                                                                                                                            
    "NiDQodCy0LXRgNC00LvQvtCy0YHQutCw0Y8g0L7QsdC70LDRgdGC0YwxITAfBgNV\n"                                                                                                                                                                                                            
    "BAcMGNCV0LrQsNGC0LXRgNC40L3QsdGD0YDQszEwMC4GA1UECwwn0KPQtNC+0YHR\n"                                                                                                                                                                                                            
    "gtC+0LLQtdGA0Y/RjtGJ0LjQuSDRhtC10L3RgtGAMS4wLAYDVQQKDCXQl9CQ0J4g\n"                                                                                                                                                                                                            
    "wqvQn9CkIMKr0KHQmtCRINCa0L7QvdGC0YPRgMK7MRswGQYDVQQDExJVQyBTS0Ig\n"                                                                                                                                                                                                            
    "S29udHVyIChHVCkwHhcNMTEwNTMwMDYxMzAwWhcNMTIwNTMwMDYxMzAwWjCCAYUx\n"                                                                                                                                                                                                            
    "IDAeBgkqhkiG9w0BCQEWEXN1cHBvcnRAZG9udGV4LnJ1MQswCQYDVQQGEwJSVTEs\n"                                                                                                                                                                                                            
    "MCoGA1UECAwj0KDQvtGB0YLQvtCy0YHQutCw0Y8g0L7QsdC70LDRgdGC0YwxEzAR\n"                                                                                                                                                                                                            
    "BgNVBAcMCtCo0LDRhdGC0YsxPDA6BgNVBAoMM9Ce0J7QniAi0KLQvtGA0LPQvtCy\n"                                                                                                                                                                                                            
    "0YvQuSDQlNC+0LwgItCU0L7QvS3QotC10LrRgdGCIjE7MDkGA1UEAwwy0JHRg9C9\n"                                                                                                                                                                                                            
    "0LjQvdCwINCi0LDRgtGM0Y/QvdCwINCT0YDQuNCz0L7RgNGM0LXQstC90LAxPjA8\n"                                                                                                                                                                                                            
    "BgkqhkiG9w0BCQIML0lOTj02MTU1MDUyNjIwL0tQUD02MTU1MDEwMDEvT0dSTj0x\n"                                                                                                                                                                                                            
    "MDM2MTU1MDA3NTY5MRkwFwYDVQQMDBDQtNC40YDQtdC60YLQvtGAMTswOQYDVQQE\n"                                                                                                                                                                                                            
    "DDLQkdGD0L3QuNC90LAg0KLQsNGC0YzRj9C90LAg0JPRgNC40LPQvtGA0YzQtdCy\n"                                                                                                                                                                                                            
    "0L3QsDBjMBwGBiqFAwICEzASBgcqhQMCAiQABgcqhQMCAh4BA0MABECqQcncI22P\n"                                                                                                                                                                                                            
    "QU3ppyaEnrkNK6GFD2OOkcOgPHGiWeRR24HUVM7m+68CGKXy92ZftgtiDnjlxv/t\n"                                                                                                                                                                                                            
    "rFzExwFUqtaVo4ICFzCCAhMwDgYDVR0PAQH/BAQDAgTwMGoGA1UdJQRjMGEGCCsG\n"                                                                                                                                                                                                            
    "AQUFBwMCBggrBgEFBQcDBAYHKoUDAgIiBgYHKoUDBgMBAQYHKoUDAwcFRgYIKoUD\n"                                                                                                                                                                                                            
    "BgMBAwEGCCqFAwYDAQIBBggqhQMGAwEEAQYIKoUDBgMBBAIGCCqFAwYDAQQDMBwG\n"                                                                                                                                                                                                            
    "A1UdEQQVMBOBEXN1cHBvcnRAZG9udGV4LnJ1MB0GA1UdDgQWBBRdjEifl5axVer7\n"                                                                                                                                                                                                            
    "eG++GBro/JsUBDAfBgNVHSMEGDAWgBQttS1GRNv9Ok1H9xwOpN14FMmwBTBuBgNV\n"                                                                                                                                                                                                            
    "HR8EZzBlMGOgYaBfhi1odHRwOi8vY2Euc2tia29udHVyLnJ1L2NkcC9rb250dXIt\n"                                                                                                                                                                                                            
    "Z3QtMjAxMC5jcmyGLmh0dHA6Ly9jZHAuc2tia29udHVyLnJ1L2NkcC9rb250dXIt\n"                                                                                                                                                                                                            
    "Z3QtMjAxMC5jcmwwgZkGCCsGAQUFBwEBBIGMMIGJMEIGCCsGAQUFBzAChjZodHRw\n"                                                                                                                                                                                                            
    "Oi8vY2Euc2tia29udHVyLnJ1L2NlcnRpZmljYXRlcy9rb250dXItZ3QtMjAxMC5j\n"                                                                                                                                                                                                            
    "cnQwQwYIKwYBBQUHMAKGN2h0dHA6Ly9jZHAuc2tia29udHVyLnJ1L2NlcnRpZmlj\n"                                                                                                                                                                                                            
    "YXRlcy9rb250dXItZ3QtMjAxMC5jcnQwKwYDVR0QBCQwIoAPMjAxMTA1MzAwNjEz\n"                                                                                                                                                                                                            
    "MDBagQ8yMDEyMDUyOTA2MDgwMFowCAYGKoUDAgIDA0EAM2ZYb+9SyRJL97bIekQZ\n"                                                                                                                                                                                                            
    "Uwjh+kKRmFSqkxpTjQTU8F7feDg6DmXH5EMhRTLCoE64QGgXOsV8x1TgkUvRuYaF\n"                                                                                                                                                                                                            
    "Xw==\n"                                                                                                                                                                                                                                                                        
    "-----END CERTIFICATE-----\n";

  //  SSL_library_init();
   // OpenSSL_add_all_algorithms();

    BIO *bioCerts = BIO_new_mem_buf((void*)szCerts, -1);
    certArray = (STACK_OF(X509_INFO) *)PEM_X509_INFO_read_bio(bioCerts, NULL, NULL, NULL);
    }
    //////////////////////////

    return self;
}

- (void)dealloc
{    
    [imageDoc release];
    [documentName release];
    [creationDate release];
    [documentSize release];
    [inputFilePath release];
    [encryptedFilePath release];
    [resultTempFilePath release];
    [settingsMenu release];
    [imageProfile release];
    [tblRecipients release];
    [docInteractionController release];
    [settingsMenuPopover release];
    [btnSelectSettings release];
    [btnAddRecipients release];

    [super dealloc];
}

- (void)documentInteractionControllerWillPresentOpenInMenu:(UIDocumentInteractionController *)controller
{
    
}

- (void)setupDocumentControllerWithURL:(NSURL *)url
{
    if (self.docInteractionController == nil)
    {
        self.docInteractionController = [UIDocumentInteractionController interactionControllerWithURL:url];
        self.docInteractionController.delegate = self;
    }
    else
    {
        self.docInteractionController.URL = url;
    }

    [docInteractionController retain];
}

- (void)documentInteractionControllerDidEndPreview:(UIDocumentInteractionController *)controller
{
    [controller autorelease];
}

- (UIViewController *)documentInteractionControllerViewControllerForPreview:(UIDocumentInteractionController *)interactionController
{
    return self;
}

- (NSInteger)numberOfPreviewItemsInPreviewController:(QLPreviewController *)previewController
{
    return 1;
}

- (void)previewControllerDidDismiss:(QLPreviewController *)controller
{
    // if the preview dismissed (done button touched), use this method to post-process previews
}

// returns the item that the preview controller should preview
- (id)previewController:(QLPreviewController *)previewController previewItemAtIndex:(NSInteger)idx
{
    return [NSURL fileURLWithPath:resultTempFilePath];
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    if (nil != certArray)
    {
        return certArray->stack.num;
    }
    else
    {
        return 0;
    }
}

- (void)viewDidUnload
{
    // important: remove created result file (if only it has been created) and input file
    NSError *error;
    if ([[NSFileManager defaultManager] fileExistsAtPath:resultTempFilePath])
    {
        [[NSFileManager defaultManager] removeItemAtPath:resultTempFilePath error:&error];
    }
    
    if ([[NSFileManager defaultManager] fileExistsAtPath:inputFilePath])
    {
        [[NSFileManager defaultManager] removeItemAtPath:inputFilePath error:&error];
    }

    [self setImageDoc:nil];
    [self setDocumentName:nil];
    [self setCreationDate:nil];
    [self setDocumentSize:nil];
    [self setUrlToRecievedFile:nil];
    [self setImageProfile:nil];
    [self setTblRecipients:nil];
    [self setDocInteractionController:nil];
    [self setSettingsMenuPopover:nil];
    [self setBtnSelectSettings:nil];
    [self setBtnAddRecipients:nil];
    [self setIsShowingLandscapeView:nil];
    settingsMenu = nil;

    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}

- (void)viewWillAppear:(BOOL)animated {
    // Update the view with current data before it is displayed.
    [super viewWillAppear:animated];
}

- (void)didReceiveMemoryWarning
{
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];

    // Release any cached data, images, etc that aren't in use.
}

#pragma mark - View lifecycle

- (void)viewDidLoad
{    
    [super viewDidLoad];
    
	CRYPTO_malloc_init();
	ERR_load_crypto_strings();
	OpenSSL_add_all_algorithms();
	ENGINE_load_builtin_engines();
    
    // create temporary certificate binding to the address book store record
    ENGINE *e = ENGINE_by_id(CTIOSRSA_ENGINE_ID);
    STORE *store = STORE_new_engine(e);
    
    STORE_ctrl(store, CTIOSRSA_STORE_CTRL_SET_NAME, 0, "AddressBook", NULL);

    OPENSSL_ITEM emptyAttrs[] = {{ STORE_ATTR_END }};
    OPENSSL_ITEM emptyParams[] = {{ STORE_PARAM_KEY_NO_PARAMETERS }};
    
    for (int i = 0; i < 2; i++)
    {
        X509 *cert = (sk_X509_INFO_value(certArray, i))->x509;
        
        if (STORE_store_certificate(store, cert, emptyAttrs, emptyParams) <= 0)
        {
            // error or certificate is already present
            // check if certificate is already present
            // otherwise print error
        }
    }
    
	ABAddressBookRef addressBook = ABAddressBookCreate();
    NSArray *people = (NSArray *)ABAddressBookCopyArrayOfAllPeople(addressBook);

    ABMultiValueRef email = ABMultiValueCreateMutable(kABMultiStringPropertyType);
	bool didAdd = ABMultiValueAddValueAndLabel(email, @"example@digt.ru", kABOtherLabel, NULL);
	
	if (didAdd == YES)
	{
        if ((people != nil) && [people count])
        {
            CFErrorRef error = NULL;

            for (int i = 0; i < [people count]; i++)
            {                  
                ABRecordRef person = (ABRecordRef)[people objectAtIndex:i];
                ABMutableMultiValueRef urlMultiValue = ABMultiValueCreateMutable(kABMultiStringPropertyType);
                
                for (int  k = 0; k < 2; k++)
            {
                X509 *cert = (sk_X509_INFO_value(certArray, k))->x509;

                // create hash on it(to compare with cert hash attribute in store)
                PKCS7_ISSUER_AND_SERIAL issuerAndSerial = {};
                issuerAndSerial.issuer = cert->cert_info->issuer;
                issuerAndSerial.serial = cert->cert_info->serialNumber;

                unsigned char *szHash = (unsigned char *)malloc(256);
                unsigned char *szHashValue = (unsigned char *)malloc(256);

                szHash[0] = '\0';
                szHashValue[0] = '\0';
                unsigned int length = 0;
 
                if (PKCS7_ISSUER_AND_SERIAL_digest(&issuerAndSerial, EVP_sha1(), szHash, &length) <= 0)
                {
                    return; // TODO: throw error
                }

                NSString *hexData = [Utils hexDataToString:szHash length:length isNeedSpacing:NO];
                int len = 0;
                szHashValue = X509_keyid_get0(cert, &len);
              /*  OPENSSL_ITEM attributeIssuerSerialHash[] = {
                    { STORE_ATTR_ISSUERSERIALHASH, (void *)[hexData cStringUsingEncoding:NSASCIIStringEncoding], [hexData length] },
                    { STORE_ATTR_END } }; // 160 bit string (SHA1)

                X509 *certFound = STORE_get_certificate(store, attributeIssuerSerialHash, emptyParams);
                NSString *serialNumber = [Utils hexDataToString:certFound->cert_info->serialNumber->data length:certFound->cert_info->serialNumber->length isNeedSpacing:true];
                */
                
                NSError *error;
                NSString *logFilePath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];
                logFilePath = [logFilePath stringByDeletingLastPathComponent];
                logFilePath = [logFilePath stringByAppendingPathComponent:@"tmp"];
                logFilePath = [logFilePath stringByAppendingPathComponent:@"trusted_ssl.log"];

                NSString *logContent;
                if ([[NSFileManager defaultManager] fileExistsAtPath:logFilePath])
                {    
                    logContent = [NSString stringWithContentsOfFile:logFilePath encoding:NSASCIIStringEncoding error:&error];
                }

                // add URL to the person
                NSMutableString *strCertURL = [[NSMutableString alloc] initWithCString:"cryptoarm://certificate/" encoding:NSASCIIStringEncoding];
                [strCertURL appendString:[NSString stringWithCString:[hexData cStringUsingEncoding:NSASCIIStringEncoding] encoding:NSASCIIStringEncoding]];

                ABMultiValueAddValueAndLabel(urlMultiValue, strCertURL, kABOtherLabel, NULL);
            }
                
                CFErrorRef *errorAddrBook;
                ABRecordSetValue(person, kABPersonURLProperty, urlMultiValue, errorAddrBook);
                CFRelease(urlMultiValue);
            }

            // save changes to the address book
            ABAddressBookSave(addressBook, &error);
        }
    }
    
    CFRelease(email);
    CFRelease(addressBook);
    
    STORE_free(store);
    ENGINE_free(e);

    // TODO: remove next step
    // construct private key
    static const char* szPrivateKey =
    "-----BEGIN RSA PRIVATE KEY-----\n"                                                                                                                                                                                                                                               
    "MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAK06MyXJDtu5gBeD\n"
    "UYPXNNVvcxlpy9EuOq3FpifIID44gWbwBy8b5o+LElQftzaBLo4ZyTZjltiJO2Xf\n"
    "DClcWVNSGLltndRw8i1dqnBQ8uDzqr/SU75nij42lR8IHveG8Mzay8eIayfqOpgH\n"
    "D67DY35RkS5GM7PbOLJghgkyFz37AgMBAAECgYBjLOv1mRvBnn2AeLVlpwNfoxQh\n"
    "m5mOJEqCDKOpKQGUveMQHSHvzah9zCBtO084jFMsFgVF91R4mnEATOf4kh+tCxMt\n"
    "Bw7Tzddp24BIlUlmew/cu4ue2dYY/C1XFDsBq0Xh3BHmhOKy/ECivMe3qdNxANeN\n"
    "5hqspbs3i0mULBRFsQJBAOgB19JlySjAAt9l6Sl7rF4yc5t9cJUMV/LvKI1Svs2l\n"
    "6bM1r1OGW8SV5m1XZNKqDvO6+4u2YEpgrpaa+P4nhDMCQQC/JDggD4tq1YVHUoVi\n"
    "FnBGFzCGObCPMQxTuH+tKBXGeHMKva76tP9aUzqibfbsTWx4wz790EDEHlDGOCpG\n"
    "elcZAkEAtWw7iJtvoh4EIQ1gNsAvGbn6DS0aTHNKkv3RiDGcYtPK3AivAXGfcSqG\n"
    "9hnRDatN5enhqm8C/SZ9X+fvrU7ZYQJAT+hOZmjZOhKFo2mGRZln2oV7TcH0ZAh3\n"
    "RNDO347we4aDYawm6LyePB6rVphuMB+2B05omSdkzBh4YEW+trQSkQJBAMRNr1B4\n"
    "+RC6HDV2PaTIa9W/xjIK5SW+HuMiRNPluGbL9mcW0iOaaiO0CV4+R00a6I9V4noX\n"
    "VEpSG6XUWwvqoaM=\n"
    "-----END RSA PRIVATE KEY-----\n";
    
    BIO* tempBioPrivateKey = BIO_new_mem_buf((void *)szPrivateKey, -1);
    RSA * rsaPrivateKey = PEM_read_bio_RSAPrivateKey(tempBioPrivateKey, 0, 0, 0);
    
    private_key = EVP_PKEY_new();
    EVP_PKEY_assign_RSA(private_key, rsaPrivateKey);     
    BIO_free(tempBioPrivateKey);
    
    // add callback watch device orientation changed selector
    [[UIDevice currentDevice] beginGeneratingDeviceOrientationNotifications];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(orientationChanged:) name:UIDeviceOrientationDidChangeNotification object:nil];
    
    // find out current device orientation
    isShowingLandscapeView = NO;
    
    if (self.navigationController.view.frame.size.width < 768)
    {
        // landscape orientation
        isShowingLandscapeView = YES;
    }
    else
    {
        isShowingLandscapeView = NO;        
    }

    // initialize page components with some information
    [btnSelectSettings setTitle:@"Настройка 1" forState:UIControlStateNormal];
    [btnSelectSettings setShowsTouchWhenHighlighted:YES];
    [btnSelectSettings addTarget:self action:@selector(showSettingsMenu) forControlEvents:UIControlEventTouchUpInside];
    [btnSelectSettings setAutoresizingMask: UIViewAutoresizingFlexibleWidth];
    
    [navDocRecipList.topItem setTitle:NSLocalizedString(@"WIZARD_RECIPIENT_LIST", @"WIZARD_RECIPIENT_LIST")];
    [navDocRecipList.topItem.leftBarButtonItem setTitle:NSLocalizedString(@"WIZARD_ADD_RECIPIENT_BTN", @"WIZARD_ADD_RECIPIENT_BTN")];

    [self.imageDoc performSelectorOnMainThread:@selector(setImage:) withObject: [UIImage imageNamed:@"cert-invalid.png"] waitUntilDone:YES];
    [self.imageProfile performSelectorOnMainThread:@selector(setImage:) withObject: [UIImage imageNamed:@"profile.png"] waitUntilDone:YES];

    // set background color
    //[self.view setBackgroundColor:[UIColor colorWithWhite:0.95 alpha:1.000]];
    
    // set info of the opened document
    [documentName setText:[inputFilePath lastPathComponent]];
    
    // set file size info
    NSError *errorAttr;
    NSDictionary *fileAttributes = [[NSFileManager defaultManager] attributesOfItemAtPath:[self.urlToRecievedFile path] error:&errorAttr];

    [documentSize setText:[NSString stringWithFormat:@"%@ %@", NSLocalizedString(@"WIZARD_SIZE", @"WIZARD_SIZE"), [Utils formattedFileSize:[[fileAttributes objectForKey:NSFileSize] intValue]]]];

    // set language from CryptoARM settings paner
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    NSArray* languages = [defaults objectForKey:@"AppleLanguages"];
    NSString* selectedLanguage = [languages objectAtIndex:0];
    NSString *localeIdentifier;
    
    if ([selectedLanguage isEqualToString:@"ru"])
    {
        localeIdentifier = @"ru_RU";
    }
    else if ([selectedLanguage isEqualToString:@"en"])
    {
        localeIdentifier = @"en_EN";
    }
    
    NSLocale *locale = [[NSLocale alloc] initWithLocaleIdentifier:localeIdentifier];
    
    // this converts the date to a string
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    [dateFormatter setLocale:locale];
    [dateFormatter setFormatterBehavior:NSDateFormatterBehaviorDefault];

    // extract from file its creation date
    NSFileManager* fm = [NSFileManager defaultManager];
    NSDictionary* attrs = [fm attributesOfItemAtPath:inputFilePath error:nil];
    NSDate* fileCreationDate = [attrs objectForKey: NSFileCreationDate];

    // get the name of the month
    [dateFormatter setDateFormat:@"MMMM"];
    NSString *monthName = [dateFormatter stringFromDate:fileCreationDate];
    
    // extract date and year
    NSDateComponents *dateComponents = [[NSCalendar currentCalendar] components:NSDayCalendarUnit | NSYearCalendarUnit fromDate:fileCreationDate];
    
    // set creation date info
    creationDate.text = [NSString stringWithFormat:@"%@: %d %@ %d %@.", NSLocalizedString(@"WIZARD_CREATED", @"WIZARD_CREATED"), [dateComponents day], monthName, [dateComponents year], NSLocalizedString(@"YEAR_PREFIX", @"YEAR_PREFIX")];
    
    // add action to the btnAddRecipients
    [btnAddRecipients setAction:@selector(showAdvancedAddressBook)];
    
    tblRecipients.autoresizingMask = UIViewAutoresizingFlexibleHeight | UIViewAutoresizingFlexibleWidth;
    tblRecipients.dataSource = self;
    tblRecipients.delegate = self;

    [tblRecipients reloadData];
}

- (void)orientationChanged:(NSNotification *)notification
{
    UIDeviceOrientation deviceOrientation = [UIDevice currentDevice].orientation;
    
    if (UIDeviceOrientationIsLandscape(deviceOrientation) && !isShowingLandscapeView)
    {
        isShowingLandscapeView = YES;
        [tblRecipients reloadData];
    }
    else if (UIDeviceOrientationIsPortrait(deviceOrientation) && isShowingLandscapeView)
    {
        isShowingLandscapeView = NO;
        [tblRecipients reloadData];
    }
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
	return YES;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    return 78;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    NSArray *nib;
    NSString *CellIdentifier;
    
    if (isShowingLandscapeView)
    {
        nib = [[NSBundle mainBundle] loadNibNamed:@"RecipientCellViewLandscape" owner:self options:nil];
        CellIdentifier = [NSString stringWithFormat:@"recipientCellLandscape %d %d", indexPath.section, indexPath.row];
    }
    else
    {
        nib = [[NSBundle mainBundle] loadNibNamed:@"RecipientCellViewPortrait" owner:self options:nil];
        CellIdentifier = [NSString stringWithFormat:@"recipientCellPortrait %d %d", indexPath.section, indexPath.row];
    }

    RecipientCellView *cell = (RecipientCellView *)[tableView dequeueReusableCellWithIdentifier:CellIdentifier];

    if(cell == nil)
    {        
        cell = (RecipientCellView *)[nib objectAtIndex:0];
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
        
        X509_INFO *selectedCert = sk_X509_INFO_value(certArray, indexPath.row);

        // parsing X509_INFO
        cell.cert = [[[CertificateInfo alloc] initWithX509_INFO:selectedCert] autorelease];
        time_t validTo = cell.cert.validTo; // cert expires date

        // set language from CryptoARM settings pane
        NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
        NSArray* languages = [defaults objectForKey:@"AppleLanguages"];
        NSString* selectedLanguage = [languages objectAtIndex:0];
        NSString *localeIdentifier;

        if ([selectedLanguage isEqualToString:@"ru"])
        {
            localeIdentifier = @"ru_RU";
        }
        else if ([selectedLanguage isEqualToString:@"en"])
        {
            localeIdentifier = @"en_EN";
        }
        
        NSLocale * locale = [[NSLocale alloc] initWithLocaleIdentifier:localeIdentifier];
        NSDate *expiresDate = [NSDate dateWithTimeIntervalSince1970:validTo];
        
        // this converts the date to a string
        NSDateFormatter * dateFormatter = [[NSDateFormatter alloc] init];
        [dateFormatter setLocale:locale];
        [dateFormatter setFormatterBehavior:NSDateFormatterBehaviorDefault];
        
        // get the name of the month
        [dateFormatter setDateFormat:@"MMMM"];
        NSString * monthName = [dateFormatter stringFromDate:expiresDate];
        
        // extract date and year from time_t
        char szDate[5], szYear[5];
        szDate[0] = '\0'; szYear[0] = '\0';
        strftime(szDate, 5, "%d", localtime(&validTo));
        strftime(szYear, 5, "%Y", localtime(&validTo));    
        
        // set cell info
        [cell.imgCert performSelectorOnMainThread:@selector(setImage:) withObject: [UIImage imageNamed:@"cert-valid.png"] waitUntilDone:YES];
        
        NSMutableString *strNumberOfBoundCertificates = [[NSMutableString alloc] initWithString:NSLocalizedString(@"WIZARD_CERTIFICATES", @"WIZARD_CERTIFICATES")];
        [strNumberOfBoundCertificates appendString:[NSString stringWithFormat:@" %d", 1]];
        [cell.lblNumberOfBoundCerts setText:strNumberOfBoundCertificates];
        [strNumberOfBoundCertificates release];

        [cell.lblCertIssuer setText:[NSString stringWithFormat:@"%@: %@", NSLocalizedString(@"CERT_WHO_ISSUED",
                            @"CERT_WHO_ISSUED"), [Crypto getDNFromX509_NAME:cell.cert.issuer withNid:NID_commonName]]];
        [cell.lblValidTo setText:[NSString stringWithFormat:@"%@: %s %@ %s %@.", NSLocalizedString(@"CERT_EXPIRED", @"CERT_EXPIRED"), szDate, monthName, szYear, NSLocalizedString(@"YEAR_PREFIX", @"YEAR_PREFIX")]];
        
        [cell.imgCert performSelectorOnMainThread:@selector(setImage:) withObject: [UIImage imageNamed:@"OID.png"] waitUntilDone:YES];
        [cell.imgUser performSelectorOnMainThread:@selector(setImage:) withObject: [UIImage imageNamed:@"cert-valid.png"] waitUntilDone:YES];
        
        [cell.lblUserName setText:[Crypto getDNFromX509_NAME:cell.cert.subject withNid:NID_commonName]];
        
        // add image to the remove user button
        [cell.btnAddOrRemoveRecipient setImage:[UIImage imageNamed:@"folder.png"] forState:UIControlStateNormal];
    }

    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
}

#pragma mark - NavigationSource protocol support

+ (NSString*)itemTag
{
    return @"WizardEncryptViewController";
}

- (NSString*)itemTag
{
    return [WizardEncryptViewController itemTag];
}

- (NSString*)title
{
    return NSLocalizedString(@"WIZARD_ENCRYPTION_MANAGER_TITLE", @"WIZARD_ENCRYPTION_MANAGER_TITLE");
}

- (NSArray*)getAdditionalButtons
{
   /* if( !chainButton )
    {
        UIButton *buttonWithImage = [UIButton buttonWithType:UIButtonTypeCustom];
        [buttonWithImage addTarget:self action:@selector(chainButtonAction:) forControlEvents:UIControlEventTouchUpInside];
        buttonWithImage.frame = CGRectMake(0, 0, 42, 42);
        [buttonWithImage setImage:[UIImage imageNamed:@"chain.png"] forState:UIControlStateNormal];
        
        chainButton = [[UIBarButtonItem alloc] initWithCustomView:buttonWithImage];
    }
    
    return [NSArray arrayWithObject:chainButton]; */
    return nil;
}

- (void)setParentNavigationController:(UIViewController*)navController
{
    parentController = (DetailNavController*)navController;
}

- (BOOL)preserveController
{
    return FALSE;
}

- (SettingsMenuSource*)settingsMenu
{
    return settingsMenu;
}

- (void)constructSettingsMenu
{
    if( settingsMenu )
    {
        [settingsMenu release];
    }

    settingsMenu = [[SettingsMenuSource alloc] initWithTitle:NSLocalizedString(@"WIZARD_DOCUMENT_OPERATION", @"WIZARD_DOCUMENT_OPERATION")];
    
    // construct settings menu based on the type of operation
    if (operationType == ENCIPHER_OPERATION)
    {
        // encipher operation
        [settingsMenu addMenuItem:NSLocalizedString(@"WIZARD_ACTION_ENCRYPT_AND_OPEN_IN", @"WIZARD_ACTION_ENCRYPT_AND_OPEN_IN") withAction:@selector(encipherAndOpenIn) forTarget:self];
        [settingsMenu addMenuItem:NSLocalizedString(@"WIZARD_ACTION_ENCRYPT_AND_EMAIL", @"WIZARD_ACTION_ENCRYPT_AND_EMAIL") withAction:@selector(encipherAndSendEmail) forTarget:self];
    }
    else if (operationType == DECIPHER_OPERATION)
    {
        // decipher operation
        [settingsMenu addMenuItem:NSLocalizedString(@"WIZARD_ACTION_DECIPHER_AND_OPEN_IN", @"WIZARD_ACTION_DECIPHER_AND_OPEN_IN") withAction:@selector(decipherAndOpenIn) forTarget:self];
        [settingsMenu addMenuItem:NSLocalizedString(@"WIZARD_ACTION_DECIPHER_AND_EMAIL", @"WIZARD_ACTION_DECIPHER_AND_EMAIL") withAction:@selector(decipherAndSendEmail) forTarget:self];
    
        // re-encipher operation
        [settingsMenu addMenuItem:NSLocalizedString(@"WIZARD_ACTION_REENCIPHER_AND_OPEN_IN", @"WIZARD_ACTION_REENCIPHER_AND_OPEN_IN") withAction:@selector(reencipherAndOpenIn) forTarget:self];
        [settingsMenu addMenuItem:NSLocalizedString(@"WIZARD_ACTION_REENCIPHER_AND_EMAIL", @"WIZARD_ACTION_REENCIPHER_AND_EMAIL") withAction:@selector(reencipherAndSendEmail) forTarget:self];
    }
    else if (operationType == OPEN_IN_OPERATION)
    {
        [settingsMenu addMenuItem:NSLocalizedString(@"WIZARD_ACTION_OPEN_IN", @"WIZARD_ACTION_OPEN_IN") withAction:@selector(actionOpenIn) forTarget:self];
        [settingsMenu addMenuItem:NSLocalizedString(@"WIZARD_ACTION_SEND_EMAIL", @"WIZARD_ACTION_SEND_EMAIL") withAction:@selector(actionSendEmail) forTarget:self];        
    }
}

#pragma mark - Wizard crypto operation common functions
// crypto-operations

- (void)encipherAndOpenIn
{
    STACK_OF(X509) *stackOfX509SelectedCerts = sk_X509_new_null();
    
    for (int i = 0; i < 2/* certArray->stack.num */; i++)
    {
        sk_X509_push(stackOfX509SelectedCerts, (sk_X509_INFO_value(certArray, i))->x509);
    }
    
    // encipher with a bio stream
    if (![Crypto encode_message:inputFilePath recipientsArray:stackOfX509SelectedCerts outFilePath:resultTempFilePath])
    {
        // perform open in operation
        [self actionOpenIn];

        // BOOL fileExists = [[NSFileManager defaultManager] fileExistsAtPath:resultTempFilePath];
    }
    else
    {
        // some error
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"WARNING", @"WARNING") message:NSLocalizedString(@"UNKNOWN_ERROR_OCCURED", @"UNKNOWN_ERROR_OCCURED") delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        
        [alert show];
        [alert release];        
    }
}

-(void)encipherAndSendEmail
{
    STACK_OF(X509) *stackOfX509SelectedCerts = sk_X509_new_null();
    
    for (int i = 0; i < 2/* certArray->stack.num */; i++)
    {
        X509 *cert = (sk_X509_INFO_value(certArray, i))->x509;
        sk_X509_push(stackOfX509SelectedCerts, cert);
    }

    // encipher with a bio stream
    if (![Crypto encode_message:inputFilePath recipientsArray:stackOfX509SelectedCerts outFilePath:resultTempFilePath])
    {
        [self actionSendEmail];
    }
    else
    {
        // some error
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"WARNING", @"WARNING") message:NSLocalizedString(@"UNKNOWN_ERROR_OCCURED", @"UNKNOWN_ERROR_OCCURED") delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        
        [alert show];
        [alert release];        
    }
}

- (void) decipherAndOpenIn
{
    BIO *bioInputFile;
    if (!(bioInputFile = BIO_new_file([inputFilePath cStringUsingEncoding:NSASCIIStringEncoding], "r")))
    {
        return; // file not found
    }

    PKCS7 *p7; // empty non-initialized
    p7 = PEM_read_bio_PKCS7(bioInputFile, NULL, NULL, NULL);  // base 64
    
    if (!p7)
    {
        // DER
        p7 = d2i_PKCS7_bio(bioInputFile, NULL);
    }
    
    if (![Crypto decode_message:p7 privateKey:private_key recipient:(sk_X509_INFO_value(certArray, 1))->x509 outFilePath:resultTempFilePath])
    {
        // perform open in operation
        [self actionOpenIn];
    }
    else
    {
        [self showWarningUnableDecipher];
    }
}

- (void) decipherAndSendEmail
{
    BIO *bioInputFile;
    if (!(bioInputFile = BIO_new_file([inputFilePath cStringUsingEncoding:NSASCIIStringEncoding], "r")))
    {
        return; // file not found
    }
    
    PKCS7 *p7; // empty non-initialized
    p7 = PEM_read_bio_PKCS7(bioInputFile, NULL, NULL, NULL);  // base 64
    
    if (!p7)
    {
        // DER
        p7 = d2i_PKCS7_bio(bioInputFile, NULL);
    }
    
    if (![Crypto decode_message:p7 privateKey:private_key recipient:(sk_X509_INFO_value(certArray, 0))->x509 outFilePath:resultTempFilePath])
    {
        
        [self actionSendEmail];
    }
    else
    {
        [self showWarningUnableDecipher];
    }
}

- (void) reencipherAndOpenIn
{
    // decifer and then encipher with a new list of the recipients
}

- (void) reencipherAndSendEmail
{
    // decifer and then encipher with a new list of the recipients
}

- (void) showWarningUnableDecipher
{
    // some error, we have not any private key corresponding public key in the recipient cert list
    resultTempFilePath = inputFilePath; // bacause we open in and send via e-mail file by resultTempFilePath file path string 
    
    // show warning message
    UIView *viewWarningUnableToDecipher = [[UIView alloc] initWithFrame:CGRectMake(0, 200, 768, 824)];
    [viewWarningUnableToDecipher setBackgroundColor:[UIColor whiteColor]];
    
    UIImageView *imgWarning = [[UIImageView alloc] initWithFrame:CGRectMake(70,90,128,128)];
    NSString *filePath = [[NSBundle mainBundle] pathForResource:@"cert-invalid" ofType:@"png"];
    NSData *certImageData = [NSData dataWithContentsOfFile:filePath];
    [imgWarning setImage:[UIImage imageWithData:certImageData]];
    [viewWarningUnableToDecipher addSubview:imgWarning];
    
    UILabel *lblCannotDecipher = [[UILabel alloc] initWithFrame:CGRectMake(230, 0, 400, 300)];
    [lblCannotDecipher setNumberOfLines:5];
    [lblCannotDecipher setFont:[UIFont systemFontOfSize:20]];
    [lblCannotDecipher setText:NSLocalizedString(@"WIZARD_WARNING_CANNOT_DECIPHER", @"WIZARD_WARNING_CANNOT_DECIPHER")];
    [viewWarningUnableToDecipher addSubview:lblCannotDecipher];
    
    [self.view addSubview:viewWarningUnableToDecipher];
    [viewWarningUnableToDecipher release];
    
    operationType = OPEN_IN_OPERATION;
    [self constructSettingsMenu];
}

- (void) actionOpenIn
{
    // transfer document into another application
    [self setupDocumentControllerWithURL:[NSURL fileURLWithPath:resultTempFilePath]];
    [docInteractionController presentOpenInMenuFromRect:[imageDoc bounds] inView:imageDoc animated:YES];
}

- (void) actionSendEmail
{
    // send document via email
    STACK_OF(X509) *stackOfX509SelectedCerts = sk_X509_new_null();
    NSMutableArray *arrRecipientEmails = [[NSMutableArray alloc] init];
    
    for (int i = 0; i < 2/* certArray->stack.num */; i++)
    {
        X509 *cert = (sk_X509_INFO_value(certArray, i))->x509;
        sk_X509_push(stackOfX509SelectedCerts, cert);
        
        NSString *strEmail = [Crypto getDNFromX509_NAME:cert->cert_info->subject withNid:NID_pkcs9_emailAddress];
        if (![arrRecipientEmails containsObject:strEmail])
        {
            [arrRecipientEmails addObject:strEmail];
        }
    }

    if ([MFMailComposeViewController canSendMail])
    {
        // OK
        MFMailComposeViewController *mailer = [[MFMailComposeViewController alloc] init];
        mailer.mailComposeDelegate = self;
        mailer.modalPresentationStyle = UIModalPresentationPageSheet;
        
        [mailer setToRecipients:arrRecipientEmails];
        
        NSData *attachment = [[NSData alloc] initWithContentsOfURL:[NSURL fileURLWithPath:resultTempFilePath]];
        [mailer addAttachmentData:attachment mimeType:@"application/octet-stream" fileName:[resultTempFilePath lastPathComponent]];
        
        [self presentModalViewController:mailer animated:YES];
        
        [mailer release];
    }
    else
    {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@"WARNING", @"WARNING") message:NSLocalizedString(@"UNABLE_SEND_EMAIL", @"UNABLE_SEND_EMAIL") delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        
        [alert show];
        [alert release];
    }
}

- (void)mailComposeController:(MFMailComposeViewController*)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError*)error
{    switch (result)
    {
        case MFMailComposeResultCancelled:
            NSLog(@"Mail cancelled: you cancelled the operation and no email message was queued.");
            break;
        case MFMailComposeResultSaved:
            NSLog(@"Mail saved: you saved the email message in the drafts folder.");
            break;
        case MFMailComposeResultSent:
            NSLog(@"Mail send: the email message is queued in the outbox. It is ready to send.");
            break;
        case MFMailComposeResultFailed:
            NSLog(@"Mail failed: the email message was not saved or queued, possibly due to an error.");
            break;
        default:
            NSLog(@"Mail not sent.");
            break;
    }

    // Remove the mail view
    [self dismissModalViewControllerAnimated:YES];
}

- (void)showSettingsMenu
{
    SystemSettingsMenuViewController *systemSettingsMenu = [[SystemSettingsMenuViewController alloc] init];
    [systemSettingsMenu addMenuItem:@"Настройка 1" andCreationDate:@"Создана 01.12.2011" andOwner:@"Владелец: Бурдин Денис Владимирович"];
    [systemSettingsMenu addMenuItem:@"Настройка 2" andCreationDate:@"Создана 30.11.2011" andOwner:@"Владелец: Бурдин Денис Владимирович"];

    [systemSettingsMenu setTitle:NSLocalizedString(@"CHOICE_OF_SETTINGS", @"CHOICE_OF_SETTINGS")];

    UINavigationController *navSettingsMenu = [[UINavigationController alloc] initWithRootViewController:systemSettingsMenu];

    settingsMenuPopover = [[UIPopoverController alloc] initWithContentViewController:navSettingsMenu];
    settingsMenuPopover.popoverContentSize = CGSizeMake(settingsMenuPopover.popoverContentSize.width, [systemSettingsMenu calculateMenuHeight]);
    
    [systemSettingsMenu setPopoverController:settingsMenuPopover];
    [systemSettingsMenu release];

    [settingsMenuPopover presentPopoverFromRect:btnSelectSettings.frame inView:self.view permittedArrowDirections:UIPopoverArrowDirectionAny animated:YES];
}

- (void)showAdvancedAddressBook
{
    [parentController pushNavController:[[AdvancedAddressBookViewController alloc] initWithNibName:@"AdvancedAddressBookViewController" bundle:nil]];
}

- (Class)getSavingObjcetClass
{
    //TODO: implement, if necessary
    return [self class];
}

- (UINavigationItem<MenuDataRefreshinProtocol>*)createSavingObject
{
    //TODO: implement, if necessary
    return nil;
}

@end
